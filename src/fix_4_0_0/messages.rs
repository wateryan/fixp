use fix_4_0_0::fields::*;
struct HeartbeatMessage {
    test_req_id: Option<TestReqID>,
}
struct TestRequestMessage {
    test_req_id: TestReqID,
}
struct ResendRequestMessage {
    begin_seq_no: BeginSeqNo,
    end_seq_no: EndSeqNo,
}
struct RejectMessage {
    ref_seq_num: RefSeqNum,
    text: Option<Text>,
}
struct SequenceResetMessage {
    gap_fill_flag: Option<GapFillFlag>,
    new_seq_no: NewSeqNo,
}
struct LogoutMessage {
    text: Option<Text>,
}
struct IndicationofInterestMessage {
    i_o_iid: IOIid,
    i_oi_trans_type: IOITransType,
    i_oi_ref_id: Option<IOIRefID>,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    side: Side,
    i_oi_shares: IOIShares,
    price: Option<Price>,
    currency: Option<Currency>,
    valid_until_time: Option<ValidUntilTime>,
    i_oi_qlty_ind: Option<IOIQltyInd>,
    i_oi_oth_svc: Option<IOIOthSvc>,
    i_oi_natural_flag: Option<IOINaturalFlag>,
    i_oi_qualifier: Option<IOIQualifier>,
    text: Option<Text>,
}
struct AdvertisementMessage {
    adv_id: AdvId,
    adv_trans_type: AdvTransType,
    adv_ref_id: Option<AdvRefID>,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    adv_side: AdvSide,
    shares: Shares,
    price: Option<Price>,
    currency: Option<Currency>,
    transact_time: Option<TransactTime>,
    text: Option<Text>,
}
struct ExecutionReportMessage {
    order_id: OrderID,
    cl_ord_id: Option<ClOrdID>,
    client_id: Option<ClientID>,
    exec_broker: Option<ExecBroker>,
    list_id: Option<ListID>,
    exec_id: ExecID,
    exec_trans_type: ExecTransType,
    exec_ref_id: Option<ExecRefID>,
    ord_status: OrdStatus,
    ord_rej_reason: Option<OrdRejReason>,
    account: Option<Account>,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    side: Side,
    order_qty: OrderQty,
    ord_type: Option<OrdType>,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    currency: Option<Currency>,
    time_in_force: Option<TimeInForce>,
    expire_time: Option<ExpireTime>,
    exec_inst: Option<ExecInst>,
    rule80_a: Option<Rule80A>,
    last_shares: LastShares,
    last_px: LastPx,
    last_mkt: Option<LastMkt>,
    last_capacity: Option<LastCapacity>,
    cum_qty: CumQty,
    avg_px: AvgPx,
    trade_date: Option<TradeDate>,
    transact_time: Option<TransactTime>,
    report_to_exch: Option<ReportToExch>,
    commission: Option<Commission>,
    comm_type: Option<CommType>,
    net_money: Option<NetMoney>,
    settl_curr_amt: Option<SettlCurrAmt>,
    settl_currency: Option<SettlCurrency>,
    text: Option<Text>,
}
struct OrderCancelRejectMessage {
    order_id: OrderID,
    cl_ord_id: ClOrdID,
    client_id: Option<ClientID>,
    exec_broker: Option<ExecBroker>,
    list_id: Option<ListID>,
    cxl_rej_reason: Option<CxlRejReason>,
    text: Option<Text>,
}
struct LogonMessage {
    encrypt_method: EncryptMethod,
    heart_bt_int: HeartBtInt,
    raw_data_length: Option<RawDataLength>,
    raw_data: Option<RawData>,
}
struct NewsMessage {
    orig_time: Option<OrigTime>,
    urgency: Option<Urgency>,
    relatd_sym: Option<RelatdSym>,
    lines_of_text: LinesOfText,
    text: Text,
    raw_data_length: Option<RawDataLength>,
    raw_data: Option<RawData>,
}
struct EmailMessage {
    email_type: EmailType,
    orig_time: Option<OrigTime>,
    relatd_sym: Option<RelatdSym>,
    order_id: Option<OrderID>,
    cl_ord_id: Option<ClOrdID>,
    lines_of_text: LinesOfText,
    text: Text,
    raw_data_length: Option<RawDataLength>,
    raw_data: Option<RawData>,
}
struct NewOrderSingleMessage {
    cl_ord_id: ClOrdID,
    client_id: Option<ClientID>,
    exec_broker: Option<ExecBroker>,
    account: Option<Account>,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    handl_inst: HandlInst,
    exec_inst: Option<ExecInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    ex_destination: Option<ExDestination>,
    process_code: Option<ProcessCode>,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    prev_close_px: Option<PrevClosePx>,
    side: Side,
    locate_reqd: Option<LocateReqd>,
    order_qty: OrderQty,
    ord_type: OrdType,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    currency: Option<Currency>,
    i_o_iid: Option<IOIid>,
    quote_id: Option<QuoteID>,
    time_in_force: Option<TimeInForce>,
    expire_time: Option<ExpireTime>,
    commission: Option<Commission>,
    comm_type: Option<CommType>,
    rule80_a: Option<Rule80A>,
    forex_req: Option<ForexReq>,
    settl_currency: Option<SettlCurrency>,
    text: Option<Text>,
}
struct NewOrderListMessage {
    list_id: ListID,
    wave_no: Option<WaveNo>,
    list_seq_no: ListSeqNo,
    list_no_ords: ListNoOrds,
    list_exec_inst: Option<ListExecInst>,
    cl_ord_id: ClOrdID,
    client_id: Option<ClientID>,
    exec_broker: Option<ExecBroker>,
    account: Option<Account>,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    handl_inst: HandlInst,
    exec_inst: Option<ExecInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    ex_destination: Option<ExDestination>,
    process_code: Option<ProcessCode>,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    prev_close_px: Option<PrevClosePx>,
    side: Side,
    locate_reqd: Option<LocateReqd>,
    order_qty: OrderQty,
    ord_type: OrdType,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    currency: Option<Currency>,
    time_in_force: Option<TimeInForce>,
    expire_time: Option<ExpireTime>,
    commission: Option<Commission>,
    comm_type: Option<CommType>,
    rule80_a: Option<Rule80A>,
    forex_req: Option<ForexReq>,
    settl_currency: Option<SettlCurrency>,
    text: Option<Text>,
}
struct OrderCancelRequestMessage {
    orig_cl_ord_id: OrigClOrdID,
    order_id: Option<OrderID>,
    cl_ord_id: ClOrdID,
    list_id: Option<ListID>,
    cxl_type: CxlType,
    client_id: Option<ClientID>,
    exec_broker: Option<ExecBroker>,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    side: Side,
    order_qty: OrderQty,
    text: Option<Text>,
}
struct OrderCancelReplaceRequestMessage {
    order_id: Option<OrderID>,
    client_id: Option<ClientID>,
    exec_broker: Option<ExecBroker>,
    orig_cl_ord_id: OrigClOrdID,
    cl_ord_id: ClOrdID,
    list_id: Option<ListID>,
    account: Option<Account>,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    handl_inst: HandlInst,
    exec_inst: Option<ExecInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    ex_destination: Option<ExDestination>,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    side: Side,
    order_qty: OrderQty,
    ord_type: OrdType,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    currency: Option<Currency>,
    time_in_force: Option<TimeInForce>,
    expire_time: Option<ExpireTime>,
    commission: Option<Commission>,
    comm_type: Option<CommType>,
    rule80_a: Option<Rule80A>,
    forex_req: Option<ForexReq>,
    settl_currency: Option<SettlCurrency>,
    text: Option<Text>,
}
struct OrderStatusRequestMessage {
    order_id: Option<OrderID>,
    cl_ord_id: ClOrdID,
    client_id: Option<ClientID>,
    exec_broker: Option<ExecBroker>,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    side: Side,
}
struct AllocationMessage {
    alloc_id: AllocID,
    alloc_trans_type: AllocTransType,
    ref_alloc_id: Option<RefAllocID>,
    side: Side,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    shares: Shares,
    avg_px: AvgPx,
    currency: Option<Currency>,
    avg_prx_precision: Option<AvgPrxPrecision>,
    trade_date: TradeDate,
    transact_time: Option<TransactTime>,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    net_money: Option<NetMoney>,
    settl_curr_amt: Option<SettlCurrAmt>,
    settl_currency: Option<SettlCurrency>,
    open_close: Option<OpenClose>,
    text: Option<Text>,
}
struct ListCancelRequestMessage {
    list_id: ListID,
    wave_no: Option<WaveNo>,
    text: Option<Text>,
}
struct ListExecuteMessage {
    list_id: ListID,
    wave_no: Option<WaveNo>,
    text: Option<Text>,
}
struct ListStatusRequestMessage {
    list_id: ListID,
    wave_no: Option<WaveNo>,
    text: Option<Text>,
}
struct ListStatusMessage {
    list_id: ListID,
    wave_no: Option<WaveNo>,
    no_rpts: NoRpts,
    rpt_seq: RptSeq,
}
struct AllocationACKMessage {
    client_id: Option<ClientID>,
    exec_broker: Option<ExecBroker>,
    alloc_id: AllocID,
    trade_date: TradeDate,
    transact_time: Option<TransactTime>,
    alloc_status: AllocStatus,
    alloc_rej_code: Option<AllocRejCode>,
    text: Option<Text>,
}
struct DontKnowTradeMessage {
    order_id: Option<OrderID>,
    exec_id: Option<ExecID>,
    d_k_reason: DKReason,
    symbol: Symbol,
    side: Side,
    order_qty: OrderQty,
    last_shares: LastShares,
    last_px: LastPx,
    text: Option<Text>,
}
struct QuoteRequestMessage {
    quote_req_id: QuoteReqID,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    prev_close_px: Option<PrevClosePx>,
    side: Option<Side>,
    order_qty: Option<OrderQty>,
}
struct QuoteMessage {
    quote_req_id: Option<QuoteReqID>,
    quote_id: QuoteID,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    bid_px: BidPx,
    offer_px: Option<OfferPx>,
    bid_size: Option<BidSize>,
    offer_size: Option<OfferSize>,
    valid_until_time: Option<ValidUntilTime>,
}
