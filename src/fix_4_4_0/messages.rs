use fix_4_4_0::fields::*;
struct HeartbeatMessage {
    test_req_id: Option<TestReqID>,
}
struct TestRequestMessage {
    test_req_id: TestReqID,
}
struct ResendRequestMessage {
    begin_seq_no: BeginSeqNo,
    end_seq_no: EndSeqNo,
}
struct RejectMessage {
    ref_seq_num: RefSeqNum,
    ref_tag_id: Option<RefTagID>,
    ref_msg_type: Option<RefMsgType>,
    session_reject_reason: Option<SessionRejectReason>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct SequenceResetMessage {
    gap_fill_flag: Option<GapFillFlag>,
    new_seq_no: NewSeqNo,
}
struct LogoutMessage {
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct IOIMessage {
    i_oiid: IOIID,
    i_oi_trans_type: IOITransType,
    i_oi_ref_id: Option<IOIRefID>,
    side: Side,
    qty_type: Option<QtyType>,
    i_oi_qty: IOIQty,
    currency: Option<Currency>,
    price_type: Option<PriceType>,
    price: Option<Price>,
    valid_until_time: Option<ValidUntilTime>,
    i_oi_qlty_ind: Option<IOIQltyInd>,
    i_oi_natural_flag: Option<IOINaturalFlag>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    transact_time: Option<TransactTime>,
    u_rl_link: Option<URLLink>,
}
struct AdvertisementMessage {
    adv_id: AdvId,
    adv_trans_type: AdvTransType,
    adv_ref_id: Option<AdvRefID>,
    adv_side: AdvSide,
    quantity: Quantity,
    qty_type: Option<QtyType>,
    price: Option<Price>,
    currency: Option<Currency>,
    trade_date: Option<TradeDate>,
    transact_time: Option<TransactTime>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    u_rl_link: Option<URLLink>,
    last_mkt: Option<LastMkt>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
}
struct ExecutionReportMessage {
    order_id: OrderID,
    secondary_order_id: Option<SecondaryOrderID>,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    secondary_exec_id: Option<SecondaryExecID>,
    cl_ord_id: Option<ClOrdID>,
    orig_cl_ord_id: Option<OrigClOrdID>,
    cl_ord_link_id: Option<ClOrdLinkID>,
    quote_resp_id: Option<QuoteRespID>,
    ord_status_req_id: Option<OrdStatusReqID>,
    mass_status_req_id: Option<MassStatusReqID>,
    tot_num_reports: Option<TotNumReports>,
    last_rpt_requested: Option<LastRptRequested>,
    trade_origination_date: Option<TradeOriginationDate>,
    list_id: Option<ListID>,
    cross_id: Option<CrossID>,
    orig_cross_id: Option<OrigCrossID>,
    cross_type: Option<CrossType>,
    exec_id: ExecID,
    exec_ref_id: Option<ExecRefID>,
    exec_type: ExecType,
    ord_status: OrdStatus,
    working_indicator: Option<WorkingIndicator>,
    ord_rej_reason: Option<OrdRejReason>,
    exec_restatement_reason: Option<ExecRestatementReason>,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    account_type: Option<AccountType>,
    day_booking_inst: Option<DayBookingInst>,
    booking_unit: Option<BookingUnit>,
    prealloc_method: Option<PreallocMethod>,
    settl_type: Option<SettlType>,
    settl_date: Option<SettlDate>,
    cash_margin: Option<CashMargin>,
    clearing_fee_indicator: Option<ClearingFeeIndicator>,
    side: Side,
    qty_type: Option<QtyType>,
    ord_type: Option<OrdType>,
    price_type: Option<PriceType>,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    pegged_price: Option<PeggedPrice>,
    discretion_price: Option<DiscretionPrice>,
    target_strategy: Option<TargetStrategy>,
    target_strategy_parameters: Option<TargetStrategyParameters>,
    participation_rate: Option<ParticipationRate>,
    target_strategy_performance: Option<TargetStrategyPerformance>,
    currency: Option<Currency>,
    compliance_id: Option<ComplianceID>,
    solicited_flag: Option<SolicitedFlag>,
    time_in_force: Option<TimeInForce>,
    effective_time: Option<EffectiveTime>,
    expire_date: Option<ExpireDate>,
    expire_time: Option<ExpireTime>,
    exec_inst: Option<ExecInst>,
    order_capacity: Option<OrderCapacity>,
    order_restrictions: Option<OrderRestrictions>,
    cust_order_capacity: Option<CustOrderCapacity>,
    last_qty: Option<LastQty>,
    underlying_last_qty: Option<UnderlyingLastQty>,
    last_px: Option<LastPx>,
    underlying_last_px: Option<UnderlyingLastPx>,
    last_par_px: Option<LastParPx>,
    last_spot_rate: Option<LastSpotRate>,
    last_forward_points: Option<LastForwardPoints>,
    last_mkt: Option<LastMkt>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    time_bracket: Option<TimeBracket>,
    last_capacity: Option<LastCapacity>,
    leaves_qty: LeavesQty,
    cum_qty: CumQty,
    avg_px: AvgPx,
    day_order_qty: Option<DayOrderQty>,
    day_cum_qty: Option<DayCumQty>,
    day_avg_px: Option<DayAvgPx>,
    g_t_booking_inst: Option<GTBookingInst>,
    trade_date: Option<TradeDate>,
    transact_time: Option<TransactTime>,
    report_to_exch: Option<ReportToExch>,
    gross_trade_amt: Option<GrossTradeAmt>,
    num_days_interest: Option<NumDaysInterest>,
    ex_date: Option<ExDate>,
    accrued_interest_rate: Option<AccruedInterestRate>,
    accrued_interest_amt: Option<AccruedInterestAmt>,
    interest_at_maturity: Option<InterestAtMaturity>,
    end_accrued_interest_amt: Option<EndAccruedInterestAmt>,
    start_cash: Option<StartCash>,
    end_cash: Option<EndCash>,
    traded_flat_switch: Option<TradedFlatSwitch>,
    basis_feature_date: Option<BasisFeatureDate>,
    basis_feature_price: Option<BasisFeaturePrice>,
    concession: Option<Concession>,
    total_takedown: Option<TotalTakedown>,
    net_money: Option<NetMoney>,
    settl_curr_amt: Option<SettlCurrAmt>,
    settl_currency: Option<SettlCurrency>,
    settl_curr_fx_rate: Option<SettlCurrFxRate>,
    settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
    handl_inst: Option<HandlInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    position_effect: Option<PositionEffect>,
    max_show: Option<MaxShow>,
    booking_type: Option<BookingType>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    settl_date2: Option<SettlDate2>,
    order_qty2: Option<OrderQty2>,
    last_forward_points2: Option<LastForwardPoints2>,
    multi_leg_reporting_type: Option<MultiLegReportingType>,
    cancellation_rights: Option<CancellationRights>,
    money_laundering_status: Option<MoneyLaunderingStatus>,
    regist_id: Option<RegistID>,
    designation: Option<Designation>,
    trans_bkd_time: Option<TransBkdTime>,
    exec_valuation_point: Option<ExecValuationPoint>,
    exec_price_type: Option<ExecPriceType>,
    exec_price_adjustment: Option<ExecPriceAdjustment>,
    priority_indicator: Option<PriorityIndicator>,
    price_improvement: Option<PriceImprovement>,
    last_liquidity_ind: Option<LastLiquidityInd>,
    copy_msg_indicator: Option<CopyMsgIndicator>,
}
struct OrderCancelRejectMessage {
    order_id: OrderID,
    secondary_order_id: Option<SecondaryOrderID>,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    cl_ord_id: ClOrdID,
    cl_ord_link_id: Option<ClOrdLinkID>,
    orig_cl_ord_id: OrigClOrdID,
    ord_status: OrdStatus,
    working_indicator: Option<WorkingIndicator>,
    orig_ord_mod_time: Option<OrigOrdModTime>,
    list_id: Option<ListID>,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    account_type: Option<AccountType>,
    trade_origination_date: Option<TradeOriginationDate>,
    trade_date: Option<TradeDate>,
    transact_time: Option<TransactTime>,
    cxl_rej_response_to: CxlRejResponseTo,
    cxl_rej_reason: Option<CxlRejReason>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct LogonMessage {
    encrypt_method: EncryptMethod,
    heart_bt_int: HeartBtInt,
    raw_data_length: Option<RawDataLength>,
    raw_data: Option<RawData>,
    reset_seq_num_flag: Option<ResetSeqNumFlag>,
    next_expected_msg_seq_num: Option<NextExpectedMsgSeqNum>,
    max_message_size: Option<MaxMessageSize>,
    test_message_indicator: Option<TestMessageIndicator>,
    username: Option<Username>,
    password: Option<Password>,
}
struct NewsMessage {
    orig_time: Option<OrigTime>,
    urgency: Option<Urgency>,
    headline: Headline,
    encoded_headline_len: Option<EncodedHeadlineLen>,
    encoded_headline: Option<EncodedHeadline>,
    u_rl_link: Option<URLLink>,
    raw_data_length: Option<RawDataLength>,
    raw_data: Option<RawData>,
}
struct EmailMessage {
    email_thread_id: EmailThreadID,
    email_type: EmailType,
    orig_time: Option<OrigTime>,
    subject: Subject,
    encoded_subject_len: Option<EncodedSubjectLen>,
    encoded_subject: Option<EncodedSubject>,
    order_id: Option<OrderID>,
    cl_ord_id: Option<ClOrdID>,
    raw_data_length: Option<RawDataLength>,
    raw_data: Option<RawData>,
}
struct NewOrderSingleMessage {
    cl_ord_id: ClOrdID,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    cl_ord_link_id: Option<ClOrdLinkID>,
    trade_origination_date: Option<TradeOriginationDate>,
    trade_date: Option<TradeDate>,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    account_type: Option<AccountType>,
    day_booking_inst: Option<DayBookingInst>,
    booking_unit: Option<BookingUnit>,
    prealloc_method: Option<PreallocMethod>,
    alloc_id: Option<AllocID>,
    settl_type: Option<SettlType>,
    settl_date: Option<SettlDate>,
    cash_margin: Option<CashMargin>,
    clearing_fee_indicator: Option<ClearingFeeIndicator>,
    handl_inst: Option<HandlInst>,
    exec_inst: Option<ExecInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    ex_destination: Option<ExDestination>,
    process_code: Option<ProcessCode>,
    prev_close_px: Option<PrevClosePx>,
    side: Side,
    locate_reqd: Option<LocateReqd>,
    transact_time: TransactTime,
    qty_type: Option<QtyType>,
    ord_type: OrdType,
    price_type: Option<PriceType>,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    currency: Option<Currency>,
    compliance_id: Option<ComplianceID>,
    solicited_flag: Option<SolicitedFlag>,
    i_oiid: Option<IOIID>,
    quote_id: Option<QuoteID>,
    time_in_force: Option<TimeInForce>,
    effective_time: Option<EffectiveTime>,
    expire_date: Option<ExpireDate>,
    expire_time: Option<ExpireTime>,
    g_t_booking_inst: Option<GTBookingInst>,
    order_capacity: Option<OrderCapacity>,
    order_restrictions: Option<OrderRestrictions>,
    cust_order_capacity: Option<CustOrderCapacity>,
    forex_req: Option<ForexReq>,
    settl_currency: Option<SettlCurrency>,
    booking_type: Option<BookingType>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    settl_date2: Option<SettlDate2>,
    order_qty2: Option<OrderQty2>,
    price2: Option<Price2>,
    position_effect: Option<PositionEffect>,
    covered_or_uncovered: Option<CoveredOrUncovered>,
    max_show: Option<MaxShow>,
    target_strategy: Option<TargetStrategy>,
    target_strategy_parameters: Option<TargetStrategyParameters>,
    participation_rate: Option<ParticipationRate>,
    cancellation_rights: Option<CancellationRights>,
    money_laundering_status: Option<MoneyLaunderingStatus>,
    regist_id: Option<RegistID>,
    designation: Option<Designation>,
}
struct NewOrderListMessage {
    list_id: ListID,
    bid_id: Option<BidID>,
    client_bid_id: Option<ClientBidID>,
    prog_rpt_reqs: Option<ProgRptReqs>,
    bid_type: BidType,
    prog_period_interval: Option<ProgPeriodInterval>,
    cancellation_rights: Option<CancellationRights>,
    money_laundering_status: Option<MoneyLaunderingStatus>,
    regist_id: Option<RegistID>,
    list_exec_inst_type: Option<ListExecInstType>,
    list_exec_inst: Option<ListExecInst>,
    encoded_list_exec_inst_len: Option<EncodedListExecInstLen>,
    encoded_list_exec_inst: Option<EncodedListExecInst>,
    allowable_one_sidedness_pct: Option<AllowableOneSidednessPct>,
    allowable_one_sidedness_value: Option<AllowableOneSidednessValue>,
    allowable_one_sidedness_curr: Option<AllowableOneSidednessCurr>,
    tot_no_orders: TotNoOrders,
    last_fragment: Option<LastFragment>,
}
struct OrderCancelRequestMessage {
    orig_cl_ord_id: OrigClOrdID,
    order_id: Option<OrderID>,
    cl_ord_id: ClOrdID,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    cl_ord_link_id: Option<ClOrdLinkID>,
    list_id: Option<ListID>,
    orig_ord_mod_time: Option<OrigOrdModTime>,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    account_type: Option<AccountType>,
    side: Side,
    transact_time: TransactTime,
    compliance_id: Option<ComplianceID>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct OrderCancelReplaceRequestMessage {
    order_id: Option<OrderID>,
    trade_origination_date: Option<TradeOriginationDate>,
    trade_date: Option<TradeDate>,
    orig_cl_ord_id: OrigClOrdID,
    cl_ord_id: ClOrdID,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    cl_ord_link_id: Option<ClOrdLinkID>,
    list_id: Option<ListID>,
    orig_ord_mod_time: Option<OrigOrdModTime>,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    account_type: Option<AccountType>,
    day_booking_inst: Option<DayBookingInst>,
    booking_unit: Option<BookingUnit>,
    prealloc_method: Option<PreallocMethod>,
    alloc_id: Option<AllocID>,
    settl_type: Option<SettlType>,
    settl_date: Option<SettlDate>,
    cash_margin: Option<CashMargin>,
    clearing_fee_indicator: Option<ClearingFeeIndicator>,
    handl_inst: Option<HandlInst>,
    exec_inst: Option<ExecInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    ex_destination: Option<ExDestination>,
    side: Side,
    transact_time: TransactTime,
    qty_type: Option<QtyType>,
    ord_type: OrdType,
    price_type: Option<PriceType>,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    target_strategy: Option<TargetStrategy>,
    target_strategy_parameters: Option<TargetStrategyParameters>,
    participation_rate: Option<ParticipationRate>,
    compliance_id: Option<ComplianceID>,
    solicited_flag: Option<SolicitedFlag>,
    currency: Option<Currency>,
    time_in_force: Option<TimeInForce>,
    effective_time: Option<EffectiveTime>,
    expire_date: Option<ExpireDate>,
    expire_time: Option<ExpireTime>,
    g_t_booking_inst: Option<GTBookingInst>,
    order_capacity: Option<OrderCapacity>,
    order_restrictions: Option<OrderRestrictions>,
    cust_order_capacity: Option<CustOrderCapacity>,
    forex_req: Option<ForexReq>,
    settl_currency: Option<SettlCurrency>,
    booking_type: Option<BookingType>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    settl_date2: Option<SettlDate2>,
    order_qty2: Option<OrderQty2>,
    price2: Option<Price2>,
    position_effect: Option<PositionEffect>,
    covered_or_uncovered: Option<CoveredOrUncovered>,
    max_show: Option<MaxShow>,
    locate_reqd: Option<LocateReqd>,
    cancellation_rights: Option<CancellationRights>,
    money_laundering_status: Option<MoneyLaunderingStatus>,
    regist_id: Option<RegistID>,
    designation: Option<Designation>,
}
struct OrderStatusRequestMessage {
    order_id: Option<OrderID>,
    cl_ord_id: ClOrdID,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    cl_ord_link_id: Option<ClOrdLinkID>,
    ord_status_req_id: Option<OrdStatusReqID>,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    side: Side,
}
struct AllocationInstructionMessage {
    alloc_id: AllocID,
    alloc_trans_type: AllocTransType,
    alloc_type: AllocType,
    secondary_alloc_id: Option<SecondaryAllocID>,
    ref_alloc_id: Option<RefAllocID>,
    alloc_canc_replace_reason: Option<AllocCancReplaceReason>,
    alloc_intermed_req_type: Option<AllocIntermedReqType>,
    alloc_link_id: Option<AllocLinkID>,
    alloc_link_type: Option<AllocLinkType>,
    booking_ref_id: Option<BookingRefID>,
    alloc_no_orders_type: AllocNoOrdersType,
    previously_reported: Option<PreviouslyReported>,
    reversal_indicator: Option<ReversalIndicator>,
    match_type: Option<MatchType>,
    side: Side,
    quantity: Quantity,
    qty_type: Option<QtyType>,
    last_mkt: Option<LastMkt>,
    trade_origination_date: Option<TradeOriginationDate>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    price_type: Option<PriceType>,
    avg_px: AvgPx,
    avg_par_px: Option<AvgParPx>,
    currency: Option<Currency>,
    avg_px_precision: Option<AvgPxPrecision>,
    trade_date: TradeDate,
    transact_time: Option<TransactTime>,
    settl_type: Option<SettlType>,
    settl_date: Option<SettlDate>,
    booking_type: Option<BookingType>,
    gross_trade_amt: Option<GrossTradeAmt>,
    concession: Option<Concession>,
    total_takedown: Option<TotalTakedown>,
    net_money: Option<NetMoney>,
    position_effect: Option<PositionEffect>,
    auto_accept_indicator: Option<AutoAcceptIndicator>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    num_days_interest: Option<NumDaysInterest>,
    accrued_interest_rate: Option<AccruedInterestRate>,
    accrued_interest_amt: Option<AccruedInterestAmt>,
    total_accrued_interest_amt: Option<TotalAccruedInterestAmt>,
    interest_at_maturity: Option<InterestAtMaturity>,
    end_accrued_interest_amt: Option<EndAccruedInterestAmt>,
    start_cash: Option<StartCash>,
    end_cash: Option<EndCash>,
    legal_confirm: Option<LegalConfirm>,
    tot_no_allocs: Option<TotNoAllocs>,
    last_fragment: Option<LastFragment>,
}
struct ListCancelRequestMessage {
    list_id: ListID,
    transact_time: TransactTime,
    trade_origination_date: Option<TradeOriginationDate>,
    trade_date: Option<TradeDate>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct ListExecuteMessage {
    list_id: ListID,
    client_bid_id: Option<ClientBidID>,
    bid_id: Option<BidID>,
    transact_time: TransactTime,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct ListStatusRequestMessage {
    list_id: ListID,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct ListStatusMessage {
    list_id: ListID,
    list_status_type: ListStatusType,
    no_rpts: NoRpts,
    list_order_status: ListOrderStatus,
    rpt_seq: RptSeq,
    list_status_text: Option<ListStatusText>,
    encoded_list_status_text_len: Option<EncodedListStatusTextLen>,
    encoded_list_status_text: Option<EncodedListStatusText>,
    transact_time: Option<TransactTime>,
    tot_no_orders: TotNoOrders,
    last_fragment: Option<LastFragment>,
}
struct AllocationInstructionAckMessage {
    alloc_id: AllocID,
    secondary_alloc_id: Option<SecondaryAllocID>,
    trade_date: Option<TradeDate>,
    transact_time: TransactTime,
    alloc_status: AllocStatus,
    alloc_rej_code: Option<AllocRejCode>,
    alloc_type: Option<AllocType>,
    alloc_intermed_req_type: Option<AllocIntermedReqType>,
    match_status: Option<MatchStatus>,
    product: Option<Product>,
    security_type: Option<SecurityType>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct DontKnowTradeMessage {
    order_id: OrderID,
    secondary_order_id: Option<SecondaryOrderID>,
    exec_id: ExecID,
    d_k_reason: DKReason,
    side: Side,
    last_qty: Option<LastQty>,
    last_px: Option<LastPx>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct QuoteRequestMessage {
    quote_req_id: QuoteReqID,
    r_fq_req_id: Option<RFQReqID>,
    cl_ord_id: Option<ClOrdID>,
    order_capacity: Option<OrderCapacity>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct QuoteMessage {
    quote_req_id: Option<QuoteReqID>,
    quote_id: QuoteID,
    quote_resp_id: Option<QuoteRespID>,
    quote_type: Option<QuoteType>,
    quote_response_level: Option<QuoteResponseLevel>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    side: Option<Side>,
    settl_type: Option<SettlType>,
    settl_date: Option<SettlDate>,
    settl_date2: Option<SettlDate2>,
    order_qty2: Option<OrderQty2>,
    currency: Option<Currency>,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    account_type: Option<AccountType>,
    bid_px: Option<BidPx>,
    offer_px: Option<OfferPx>,
    mkt_bid_px: Option<MktBidPx>,
    mkt_offer_px: Option<MktOfferPx>,
    min_bid_size: Option<MinBidSize>,
    bid_size: Option<BidSize>,
    min_offer_size: Option<MinOfferSize>,
    offer_size: Option<OfferSize>,
    valid_until_time: Option<ValidUntilTime>,
    bid_spot_rate: Option<BidSpotRate>,
    offer_spot_rate: Option<OfferSpotRate>,
    bid_forward_points: Option<BidForwardPoints>,
    offer_forward_points: Option<OfferForwardPoints>,
    mid_px: Option<MidPx>,
    bid_yield: Option<BidYield>,
    mid_yield: Option<MidYield>,
    offer_yield: Option<OfferYield>,
    transact_time: Option<TransactTime>,
    ord_type: Option<OrdType>,
    bid_forward_points2: Option<BidForwardPoints2>,
    offer_forward_points2: Option<OfferForwardPoints2>,
    settl_curr_bid_fx_rate: Option<SettlCurrBidFxRate>,
    settl_curr_offer_fx_rate: Option<SettlCurrOfferFxRate>,
    settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
    comm_type: Option<CommType>,
    commission: Option<Commission>,
    cust_order_capacity: Option<CustOrderCapacity>,
    ex_destination: Option<ExDestination>,
    order_capacity: Option<OrderCapacity>,
    price_type: Option<PriceType>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct SettlementInstructionsMessage {
    settl_inst_msg_id: SettlInstMsgID,
    settl_inst_req_id: Option<SettlInstReqID>,
    settl_inst_mode: SettlInstMode,
    settl_inst_req_rej_code: Option<SettlInstReqRejCode>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    cl_ord_id: Option<ClOrdID>,
    transact_time: TransactTime,
}
struct MarketDataRequestMessage {
    m_d_req_id: MDReqID,
    subscription_request_type: SubscriptionRequestType,
    market_depth: MarketDepth,
    m_d_update_type: Option<MDUpdateType>,
    aggregated_book: Option<AggregatedBook>,
    open_close_settl_flag: Option<OpenCloseSettlFlag>,
    scope: Option<Scope>,
    m_d_implicit_delete: Option<MDImplicitDelete>,
    appl_queue_action: Option<ApplQueueAction>,
    appl_queue_max: Option<ApplQueueMax>,
}
struct MarketDataSnapshotFullRefreshMessage {
    m_d_req_id: Option<MDReqID>,
    financial_status: Option<FinancialStatus>,
    corporate_action: Option<CorporateAction>,
    net_chg_prev_day: Option<NetChgPrevDay>,
    appl_queue_depth: Option<ApplQueueDepth>,
    appl_queue_resolution: Option<ApplQueueResolution>,
}
struct MarketDataIncrementalRefreshMessage {
    m_d_req_id: Option<MDReqID>,
    appl_queue_depth: Option<ApplQueueDepth>,
    appl_queue_resolution: Option<ApplQueueResolution>,
}
struct MarketDataRequestRejectMessage {
    m_d_req_id: MDReqID,
    m_d_req_rej_reason: Option<MDReqRejReason>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct QuoteCancelMessage {
    quote_req_id: Option<QuoteReqID>,
    quote_id: QuoteID,
    quote_cancel_type: QuoteCancelType,
    quote_response_level: Option<QuoteResponseLevel>,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    account_type: Option<AccountType>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
}
struct QuoteStatusRequestMessage {
    quote_status_req_id: Option<QuoteStatusReqID>,
    quote_id: Option<QuoteID>,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    account_type: Option<AccountType>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    subscription_request_type: Option<SubscriptionRequestType>,
}
struct MassQuoteAcknowledgementMessage {
    quote_req_id: Option<QuoteReqID>,
    quote_id: Option<QuoteID>,
    quote_status: QuoteStatus,
    quote_reject_reason: Option<QuoteRejectReason>,
    quote_response_level: Option<QuoteResponseLevel>,
    quote_type: Option<QuoteType>,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    account_type: Option<AccountType>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct SecurityDefinitionRequestMessage {
    security_req_id: SecurityReqID,
    security_request_type: SecurityRequestType,
    currency: Option<Currency>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    expiration_cycle: Option<ExpirationCycle>,
    subscription_request_type: Option<SubscriptionRequestType>,
}
struct SecurityDefinitionMessage {
    security_req_id: SecurityReqID,
    security_response_id: SecurityResponseID,
    security_response_type: SecurityResponseType,
    currency: Option<Currency>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    expiration_cycle: Option<ExpirationCycle>,
    round_lot: Option<RoundLot>,
    min_trade_vol: Option<MinTradeVol>,
}
struct SecurityStatusRequestMessage {
    security_status_req_id: SecurityStatusReqID,
    currency: Option<Currency>,
    subscription_request_type: SubscriptionRequestType,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
}
struct SecurityStatusMessage {
    security_status_req_id: Option<SecurityStatusReqID>,
    currency: Option<Currency>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    unsolicited_indicator: Option<UnsolicitedIndicator>,
    security_trading_status: Option<SecurityTradingStatus>,
    financial_status: Option<FinancialStatus>,
    corporate_action: Option<CorporateAction>,
    halt_reason_char: Option<HaltReasonChar>,
    in_view_of_common: Option<InViewOfCommon>,
    due_to_related: Option<DueToRelated>,
    buy_volume: Option<BuyVolume>,
    sell_volume: Option<SellVolume>,
    high_px: Option<HighPx>,
    low_px: Option<LowPx>,
    last_px: Option<LastPx>,
    transact_time: Option<TransactTime>,
    adjustment: Option<Adjustment>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct TradingSessionStatusRequestMessage {
    trad_ses_req_id: TradSesReqID,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    trad_ses_method: Option<TradSesMethod>,
    trad_ses_mode: Option<TradSesMode>,
    subscription_request_type: SubscriptionRequestType,
}
struct TradingSessionStatusMessage {
    trad_ses_req_id: Option<TradSesReqID>,
    trading_session_id: TradingSessionID,
    trading_session_sub_id: Option<TradingSessionSubID>,
    trad_ses_method: Option<TradSesMethod>,
    trad_ses_mode: Option<TradSesMode>,
    unsolicited_indicator: Option<UnsolicitedIndicator>,
    trad_ses_status: TradSesStatus,
    trad_ses_status_rej_reason: Option<TradSesStatusRejReason>,
    trad_ses_start_time: Option<TradSesStartTime>,
    trad_ses_open_time: Option<TradSesOpenTime>,
    trad_ses_pre_close_time: Option<TradSesPreCloseTime>,
    trad_ses_close_time: Option<TradSesCloseTime>,
    trad_ses_end_time: Option<TradSesEndTime>,
    total_volume_traded: Option<TotalVolumeTraded>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct MassQuoteMessage {
    quote_req_id: Option<QuoteReqID>,
    quote_id: QuoteID,
    quote_type: Option<QuoteType>,
    quote_response_level: Option<QuoteResponseLevel>,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    account_type: Option<AccountType>,
    def_bid_size: Option<DefBidSize>,
    def_offer_size: Option<DefOfferSize>,
}
struct BusinessMessageRejectMessage {
    ref_seq_num: Option<RefSeqNum>,
    ref_msg_type: RefMsgType,
    business_reject_ref_id: Option<BusinessRejectRefID>,
    business_reject_reason: BusinessRejectReason,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct BidRequestMessage {
    bid_id: Option<BidID>,
    client_bid_id: ClientBidID,
    bid_request_trans_type: BidRequestTransType,
    list_name: Option<ListName>,
    tot_no_related_sym: TotNoRelatedSym,
    bid_type: BidType,
    num_tickets: Option<NumTickets>,
    currency: Option<Currency>,
    side_value1: Option<SideValue1>,
    side_value2: Option<SideValue2>,
    liquidity_ind_type: Option<LiquidityIndType>,
    wt_average_liquidity: Option<WtAverageLiquidity>,
    exchange_for_physical: Option<ExchangeForPhysical>,
    out_main_cntry_u_index: Option<OutMainCntryUIndex>,
    cross_percent: Option<CrossPercent>,
    prog_rpt_reqs: Option<ProgRptReqs>,
    prog_period_interval: Option<ProgPeriodInterval>,
    inc_tax_ind: Option<IncTaxInd>,
    forex_req: Option<ForexReq>,
    num_bidders: Option<NumBidders>,
    trade_date: Option<TradeDate>,
    bid_trade_type: BidTradeType,
    basis_px_type: BasisPxType,
    strike_time: Option<StrikeTime>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct BidResponseMessage {
    bid_id: Option<BidID>,
    client_bid_id: Option<ClientBidID>,
}
struct ListStrikePriceMessage {
    list_id: ListID,
    tot_no_strikes: TotNoStrikes,
    last_fragment: Option<LastFragment>,
}
struct XMLnonFIXMessage {  }
struct RegistrationInstructionsMessage {
    regist_id: RegistID,
    regist_trans_type: RegistTransType,
    regist_ref_id: RegistRefID,
    cl_ord_id: Option<ClOrdID>,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    regist_acct_type: Option<RegistAcctType>,
    tax_advantage_type: Option<TaxAdvantageType>,
    ownership_type: Option<OwnershipType>,
}
struct RegistrationInstructionsResponseMessage {
    regist_id: RegistID,
    regist_trans_type: RegistTransType,
    regist_ref_id: RegistRefID,
    cl_ord_id: Option<ClOrdID>,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    regist_status: RegistStatus,
    regist_rej_reason_code: Option<RegistRejReasonCode>,
    regist_rej_reason_text: Option<RegistRejReasonText>,
}
struct OrderMassCancelRequestMessage {
    cl_ord_id: ClOrdID,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    mass_cancel_request_type: MassCancelRequestType,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    side: Option<Side>,
    transact_time: TransactTime,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct OrderMassCancelReportMessage {
    cl_ord_id: Option<ClOrdID>,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    order_id: OrderID,
    secondary_order_id: Option<SecondaryOrderID>,
    mass_cancel_request_type: MassCancelRequestType,
    mass_cancel_response: MassCancelResponse,
    mass_cancel_reject_reason: Option<MassCancelRejectReason>,
    total_affected_orders: Option<TotalAffectedOrders>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    side: Option<Side>,
    transact_time: Option<TransactTime>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct NewOrderCrossMessage {
    cross_id: CrossID,
    cross_type: CrossType,
    cross_prioritization: CrossPrioritization,
    settl_type: Option<SettlType>,
    settl_date: Option<SettlDate>,
    handl_inst: Option<HandlInst>,
    exec_inst: Option<ExecInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    ex_destination: Option<ExDestination>,
    process_code: Option<ProcessCode>,
    prev_close_px: Option<PrevClosePx>,
    locate_reqd: Option<LocateReqd>,
    transact_time: TransactTime,
    ord_type: OrdType,
    price_type: Option<PriceType>,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    currency: Option<Currency>,
    compliance_id: Option<ComplianceID>,
    i_oiid: Option<IOIID>,
    quote_id: Option<QuoteID>,
    time_in_force: Option<TimeInForce>,
    effective_time: Option<EffectiveTime>,
    expire_date: Option<ExpireDate>,
    expire_time: Option<ExpireTime>,
    g_t_booking_inst: Option<GTBookingInst>,
    max_show: Option<MaxShow>,
    target_strategy: Option<TargetStrategy>,
    target_strategy_parameters: Option<TargetStrategyParameters>,
    participation_rate: Option<ParticipationRate>,
    cancellation_rights: Option<CancellationRights>,
    money_laundering_status: Option<MoneyLaunderingStatus>,
    regist_id: Option<RegistID>,
    designation: Option<Designation>,
}
struct CrossOrderCancelReplaceRequestMessage {
    order_id: Option<OrderID>,
    cross_id: CrossID,
    orig_cross_id: OrigCrossID,
    cross_type: CrossType,
    cross_prioritization: CrossPrioritization,
    settl_type: Option<SettlType>,
    settl_date: Option<SettlDate>,
    handl_inst: Option<HandlInst>,
    exec_inst: Option<ExecInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    ex_destination: Option<ExDestination>,
    process_code: Option<ProcessCode>,
    prev_close_px: Option<PrevClosePx>,
    locate_reqd: Option<LocateReqd>,
    transact_time: TransactTime,
    ord_type: OrdType,
    price_type: Option<PriceType>,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    currency: Option<Currency>,
    compliance_id: Option<ComplianceID>,
    i_oiid: Option<IOIID>,
    quote_id: Option<QuoteID>,
    time_in_force: Option<TimeInForce>,
    effective_time: Option<EffectiveTime>,
    expire_date: Option<ExpireDate>,
    expire_time: Option<ExpireTime>,
    g_t_booking_inst: Option<GTBookingInst>,
    max_show: Option<MaxShow>,
    target_strategy: Option<TargetStrategy>,
    target_strategy_parameters: Option<TargetStrategyParameters>,
    participation_rate: Option<ParticipationRate>,
    cancellation_rights: Option<CancellationRights>,
    money_laundering_status: Option<MoneyLaunderingStatus>,
    regist_id: Option<RegistID>,
    designation: Option<Designation>,
}
struct CrossOrderCancelRequestMessage {
    order_id: Option<OrderID>,
    cross_id: CrossID,
    orig_cross_id: OrigCrossID,
    cross_type: CrossType,
    cross_prioritization: CrossPrioritization,
    transact_time: TransactTime,
}
struct SecurityTypeRequestMessage {
    security_req_id: SecurityReqID,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    product: Option<Product>,
    security_type: Option<SecurityType>,
    security_sub_type: Option<SecuritySubType>,
}
struct SecurityTypesMessage {
    security_req_id: SecurityReqID,
    security_response_id: SecurityResponseID,
    security_response_type: SecurityResponseType,
    tot_no_security_types: Option<TotNoSecurityTypes>,
    last_fragment: Option<LastFragment>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    subscription_request_type: Option<SubscriptionRequestType>,
}
struct SecurityListRequestMessage {
    security_req_id: SecurityReqID,
    security_list_request_type: SecurityListRequestType,
    currency: Option<Currency>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    subscription_request_type: Option<SubscriptionRequestType>,
}
struct SecurityListMessage {
    security_req_id: SecurityReqID,
    security_response_id: SecurityResponseID,
    security_request_result: SecurityRequestResult,
    tot_no_related_sym: Option<TotNoRelatedSym>,
    last_fragment: Option<LastFragment>,
}
struct DerivativeSecurityListRequestMessage {
    security_req_id: SecurityReqID,
    security_list_request_type: SecurityListRequestType,
    security_sub_type: Option<SecuritySubType>,
    currency: Option<Currency>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    subscription_request_type: Option<SubscriptionRequestType>,
}
struct DerivativeSecurityListMessage {
    security_req_id: SecurityReqID,
    security_response_id: SecurityResponseID,
    security_request_result: SecurityRequestResult,
    tot_no_related_sym: Option<TotNoRelatedSym>,
    last_fragment: Option<LastFragment>,
}
struct NewOrderMultilegMessage {
    cl_ord_id: ClOrdID,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    cl_ord_link_id: Option<ClOrdLinkID>,
    trade_origination_date: Option<TradeOriginationDate>,
    trade_date: Option<TradeDate>,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    account_type: Option<AccountType>,
    day_booking_inst: Option<DayBookingInst>,
    booking_unit: Option<BookingUnit>,
    prealloc_method: Option<PreallocMethod>,
    alloc_id: Option<AllocID>,
    settl_type: Option<SettlType>,
    settl_date: Option<SettlDate>,
    cash_margin: Option<CashMargin>,
    clearing_fee_indicator: Option<ClearingFeeIndicator>,
    handl_inst: Option<HandlInst>,
    exec_inst: Option<ExecInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    ex_destination: Option<ExDestination>,
    process_code: Option<ProcessCode>,
    side: Side,
    prev_close_px: Option<PrevClosePx>,
    locate_reqd: Option<LocateReqd>,
    transact_time: TransactTime,
    qty_type: Option<QtyType>,
    ord_type: OrdType,
    price_type: Option<PriceType>,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    currency: Option<Currency>,
    compliance_id: Option<ComplianceID>,
    solicited_flag: Option<SolicitedFlag>,
    i_oiid: Option<IOIID>,
    quote_id: Option<QuoteID>,
    time_in_force: Option<TimeInForce>,
    effective_time: Option<EffectiveTime>,
    expire_date: Option<ExpireDate>,
    expire_time: Option<ExpireTime>,
    g_t_booking_inst: Option<GTBookingInst>,
    order_capacity: Option<OrderCapacity>,
    order_restrictions: Option<OrderRestrictions>,
    cust_order_capacity: Option<CustOrderCapacity>,
    forex_req: Option<ForexReq>,
    settl_currency: Option<SettlCurrency>,
    booking_type: Option<BookingType>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    position_effect: Option<PositionEffect>,
    covered_or_uncovered: Option<CoveredOrUncovered>,
    max_show: Option<MaxShow>,
    target_strategy: Option<TargetStrategy>,
    target_strategy_parameters: Option<TargetStrategyParameters>,
    participation_rate: Option<ParticipationRate>,
    cancellation_rights: Option<CancellationRights>,
    money_laundering_status: Option<MoneyLaunderingStatus>,
    regist_id: Option<RegistID>,
    designation: Option<Designation>,
    multi_leg_rpt_type_req: Option<MultiLegRptTypeReq>,
}
struct MultilegOrderCancelReplaceMessage {
    order_id: Option<OrderID>,
    orig_cl_ord_id: OrigClOrdID,
    cl_ord_id: ClOrdID,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    cl_ord_link_id: Option<ClOrdLinkID>,
    orig_ord_mod_time: Option<OrigOrdModTime>,
    trade_origination_date: Option<TradeOriginationDate>,
    trade_date: Option<TradeDate>,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    account_type: Option<AccountType>,
    day_booking_inst: Option<DayBookingInst>,
    booking_unit: Option<BookingUnit>,
    prealloc_method: Option<PreallocMethod>,
    alloc_id: Option<AllocID>,
    settl_type: Option<SettlType>,
    settl_date: Option<SettlDate>,
    cash_margin: Option<CashMargin>,
    clearing_fee_indicator: Option<ClearingFeeIndicator>,
    handl_inst: Option<HandlInst>,
    exec_inst: Option<ExecInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    ex_destination: Option<ExDestination>,
    process_code: Option<ProcessCode>,
    side: Side,
    prev_close_px: Option<PrevClosePx>,
    locate_reqd: Option<LocateReqd>,
    transact_time: TransactTime,
    qty_type: Option<QtyType>,
    ord_type: OrdType,
    price_type: Option<PriceType>,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    currency: Option<Currency>,
    compliance_id: Option<ComplianceID>,
    solicited_flag: Option<SolicitedFlag>,
    i_oiid: Option<IOIID>,
    quote_id: Option<QuoteID>,
    time_in_force: Option<TimeInForce>,
    effective_time: Option<EffectiveTime>,
    expire_date: Option<ExpireDate>,
    expire_time: Option<ExpireTime>,
    g_t_booking_inst: Option<GTBookingInst>,
    order_capacity: Option<OrderCapacity>,
    order_restrictions: Option<OrderRestrictions>,
    cust_order_capacity: Option<CustOrderCapacity>,
    forex_req: Option<ForexReq>,
    settl_currency: Option<SettlCurrency>,
    booking_type: Option<BookingType>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    position_effect: Option<PositionEffect>,
    covered_or_uncovered: Option<CoveredOrUncovered>,
    max_show: Option<MaxShow>,
    target_strategy: Option<TargetStrategy>,
    target_strategy_parameters: Option<TargetStrategyParameters>,
    participation_rate: Option<ParticipationRate>,
    cancellation_rights: Option<CancellationRights>,
    money_laundering_status: Option<MoneyLaunderingStatus>,
    regist_id: Option<RegistID>,
    designation: Option<Designation>,
    multi_leg_rpt_type_req: Option<MultiLegRptTypeReq>,
}
struct TradeCaptureReportRequestMessage {
    trade_request_id: TradeRequestID,
    trade_request_type: TradeRequestType,
    subscription_request_type: Option<SubscriptionRequestType>,
    trade_report_id: Option<TradeReportID>,
    secondary_trade_report_id: Option<SecondaryTradeReportID>,
    exec_id: Option<ExecID>,
    exec_type: Option<ExecType>,
    order_id: Option<OrderID>,
    cl_ord_id: Option<ClOrdID>,
    match_status: Option<MatchStatus>,
    trd_type: Option<TrdType>,
    trd_sub_type: Option<TrdSubType>,
    transfer_reason: Option<TransferReason>,
    secondary_trd_type: Option<SecondaryTrdType>,
    trade_link_id: Option<TradeLinkID>,
    trd_match_id: Option<TrdMatchID>,
    clearing_business_date: Option<ClearingBusinessDate>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    time_bracket: Option<TimeBracket>,
    side: Option<Side>,
    multi_leg_reporting_type: Option<MultiLegReportingType>,
    trade_input_source: Option<TradeInputSource>,
    trade_input_device: Option<TradeInputDevice>,
    response_transport_type: Option<ResponseTransportType>,
    response_destination: Option<ResponseDestination>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct TradeCaptureReportMessage {
    trade_report_id: TradeReportID,
    trade_report_trans_type: Option<TradeReportTransType>,
    trade_report_type: Option<TradeReportType>,
    trade_request_id: Option<TradeRequestID>,
    trd_type: Option<TrdType>,
    trd_sub_type: Option<TrdSubType>,
    secondary_trd_type: Option<SecondaryTrdType>,
    transfer_reason: Option<TransferReason>,
    exec_type: Option<ExecType>,
    tot_num_trade_reports: Option<TotNumTradeReports>,
    last_rpt_requested: Option<LastRptRequested>,
    unsolicited_indicator: Option<UnsolicitedIndicator>,
    subscription_request_type: Option<SubscriptionRequestType>,
    trade_report_ref_id: Option<TradeReportRefID>,
    secondary_trade_report_ref_id: Option<SecondaryTradeReportRefID>,
    secondary_trade_report_id: Option<SecondaryTradeReportID>,
    trade_link_id: Option<TradeLinkID>,
    trd_match_id: Option<TrdMatchID>,
    exec_id: Option<ExecID>,
    ord_status: Option<OrdStatus>,
    secondary_exec_id: Option<SecondaryExecID>,
    exec_restatement_reason: Option<ExecRestatementReason>,
    previously_reported: PreviouslyReported,
    price_type: Option<PriceType>,
    qty_type: Option<QtyType>,
    underlying_trading_session_id: Option<UnderlyingTradingSessionID>,
    underlying_trading_session_sub_id: Option<UnderlyingTradingSessionSubID>,
    last_qty: LastQty,
    last_px: LastPx,
    last_par_px: Option<LastParPx>,
    last_spot_rate: Option<LastSpotRate>,
    last_forward_points: Option<LastForwardPoints>,
    last_mkt: Option<LastMkt>,
    trade_date: TradeDate,
    clearing_business_date: Option<ClearingBusinessDate>,
    avg_px: Option<AvgPx>,
    avg_px_indicator: Option<AvgPxIndicator>,
    multi_leg_reporting_type: Option<MultiLegReportingType>,
    trade_leg_ref_id: Option<TradeLegRefID>,
    transact_time: TransactTime,
    settl_type: Option<SettlType>,
    settl_date: Option<SettlDate>,
    match_status: Option<MatchStatus>,
    match_type: Option<MatchType>,
    copy_msg_indicator: Option<CopyMsgIndicator>,
    publish_trd_indicator: Option<PublishTrdIndicator>,
    short_sale_reason: Option<ShortSaleReason>,
}
struct OrderMassStatusRequestMessage {
    mass_status_req_id: MassStatusReqID,
    mass_status_req_type: MassStatusReqType,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    side: Option<Side>,
}
struct QuoteRequestRejectMessage {
    quote_req_id: QuoteReqID,
    r_fq_req_id: Option<RFQReqID>,
    quote_request_reject_reason: QuoteRequestRejectReason,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct RFQRequestMessage {
    r_fq_req_id: RFQReqID,
    subscription_request_type: Option<SubscriptionRequestType>,
}
struct QuoteStatusReportMessage {
    quote_status_req_id: Option<QuoteStatusReqID>,
    quote_req_id: Option<QuoteReqID>,
    quote_id: QuoteID,
    quote_resp_id: Option<QuoteRespID>,
    quote_type: Option<QuoteType>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    side: Option<Side>,
    settl_type: Option<SettlType>,
    settl_date: Option<SettlDate>,
    settl_date2: Option<SettlDate2>,
    order_qty2: Option<OrderQty2>,
    currency: Option<Currency>,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    account_type: Option<AccountType>,
    expire_time: Option<ExpireTime>,
    price: Option<Price>,
    price_type: Option<PriceType>,
    bid_px: Option<BidPx>,
    offer_px: Option<OfferPx>,
    mkt_bid_px: Option<MktBidPx>,
    mkt_offer_px: Option<MktOfferPx>,
    min_bid_size: Option<MinBidSize>,
    bid_size: Option<BidSize>,
    min_offer_size: Option<MinOfferSize>,
    offer_size: Option<OfferSize>,
    valid_until_time: Option<ValidUntilTime>,
    bid_spot_rate: Option<BidSpotRate>,
    offer_spot_rate: Option<OfferSpotRate>,
    bid_forward_points: Option<BidForwardPoints>,
    offer_forward_points: Option<OfferForwardPoints>,
    mid_px: Option<MidPx>,
    bid_yield: Option<BidYield>,
    mid_yield: Option<MidYield>,
    offer_yield: Option<OfferYield>,
    transact_time: Option<TransactTime>,
    ord_type: Option<OrdType>,
    bid_forward_points2: Option<BidForwardPoints2>,
    offer_forward_points2: Option<OfferForwardPoints2>,
    settl_curr_bid_fx_rate: Option<SettlCurrBidFxRate>,
    settl_curr_offer_fx_rate: Option<SettlCurrOfferFxRate>,
    settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
    comm_type: Option<CommType>,
    commission: Option<Commission>,
    cust_order_capacity: Option<CustOrderCapacity>,
    ex_destination: Option<ExDestination>,
    quote_status: Option<QuoteStatus>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct QuoteResponseMessage {
    quote_resp_id: QuoteRespID,
    quote_id: Option<QuoteID>,
    quote_resp_type: QuoteRespType,
    cl_ord_id: Option<ClOrdID>,
    order_capacity: Option<OrderCapacity>,
    i_oiid: Option<IOIID>,
    quote_type: Option<QuoteType>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    side: Option<Side>,
    settl_type: Option<SettlType>,
    settl_date: Option<SettlDate>,
    settl_date2: Option<SettlDate2>,
    order_qty2: Option<OrderQty2>,
    currency: Option<Currency>,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    account_type: Option<AccountType>,
    bid_px: Option<BidPx>,
    offer_px: Option<OfferPx>,
    mkt_bid_px: Option<MktBidPx>,
    mkt_offer_px: Option<MktOfferPx>,
    min_bid_size: Option<MinBidSize>,
    bid_size: Option<BidSize>,
    min_offer_size: Option<MinOfferSize>,
    offer_size: Option<OfferSize>,
    valid_until_time: Option<ValidUntilTime>,
    bid_spot_rate: Option<BidSpotRate>,
    offer_spot_rate: Option<OfferSpotRate>,
    bid_forward_points: Option<BidForwardPoints>,
    offer_forward_points: Option<OfferForwardPoints>,
    mid_px: Option<MidPx>,
    bid_yield: Option<BidYield>,
    mid_yield: Option<MidYield>,
    offer_yield: Option<OfferYield>,
    transact_time: Option<TransactTime>,
    ord_type: Option<OrdType>,
    bid_forward_points2: Option<BidForwardPoints2>,
    offer_forward_points2: Option<OfferForwardPoints2>,
    settl_curr_bid_fx_rate: Option<SettlCurrBidFxRate>,
    settl_curr_offer_fx_rate: Option<SettlCurrOfferFxRate>,
    settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
    commission: Option<Commission>,
    comm_type: Option<CommType>,
    cust_order_capacity: Option<CustOrderCapacity>,
    ex_destination: Option<ExDestination>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    price: Option<Price>,
    price_type: Option<PriceType>,
}
struct ConfirmationMessage {
    confirm_id: ConfirmID,
    confirm_ref_id: Option<ConfirmRefID>,
    confirm_req_id: Option<ConfirmReqID>,
    confirm_trans_type: ConfirmTransType,
    confirm_type: ConfirmType,
    copy_msg_indicator: Option<CopyMsgIndicator>,
    legal_confirm: Option<LegalConfirm>,
    confirm_status: ConfirmStatus,
    alloc_id: Option<AllocID>,
    secondary_alloc_id: Option<SecondaryAllocID>,
    individual_alloc_id: Option<IndividualAllocID>,
    transact_time: TransactTime,
    trade_date: TradeDate,
    alloc_qty: AllocQty,
    qty_type: Option<QtyType>,
    side: Side,
    currency: Option<Currency>,
    last_mkt: Option<LastMkt>,
    alloc_account: AllocAccount,
    alloc_acct_id_source: Option<AllocAcctIDSource>,
    alloc_account_type: Option<AllocAccountType>,
    avg_px: AvgPx,
    avg_px_precision: Option<AvgPxPrecision>,
    price_type: Option<PriceType>,
    avg_par_px: Option<AvgParPx>,
    reported_px: Option<ReportedPx>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    process_code: Option<ProcessCode>,
    gross_trade_amt: GrossTradeAmt,
    num_days_interest: Option<NumDaysInterest>,
    ex_date: Option<ExDate>,
    accrued_interest_rate: Option<AccruedInterestRate>,
    accrued_interest_amt: Option<AccruedInterestAmt>,
    interest_at_maturity: Option<InterestAtMaturity>,
    end_accrued_interest_amt: Option<EndAccruedInterestAmt>,
    start_cash: Option<StartCash>,
    end_cash: Option<EndCash>,
    concession: Option<Concession>,
    total_takedown: Option<TotalTakedown>,
    net_money: NetMoney,
    maturity_net_money: Option<MaturityNetMoney>,
    settl_curr_amt: Option<SettlCurrAmt>,
    settl_currency: Option<SettlCurrency>,
    settl_curr_fx_rate: Option<SettlCurrFxRate>,
    settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
    settl_type: Option<SettlType>,
    settl_date: Option<SettlDate>,
    shared_commission: Option<SharedCommission>,
}
struct PositionMaintenanceRequestMessage {
    pos_req_id: PosReqID,
    pos_trans_type: PosTransType,
    pos_maint_action: PosMaintAction,
    orig_pos_req_ref_id: Option<OrigPosReqRefID>,
    pos_maint_rpt_ref_id: Option<PosMaintRptRefID>,
    clearing_business_date: ClearingBusinessDate,
    settl_sess_id: Option<SettlSessID>,
    settl_sess_sub_id: Option<SettlSessSubID>,
    account: Account,
    acct_id_source: Option<AcctIDSource>,
    account_type: AccountType,
    currency: Option<Currency>,
    transact_time: TransactTime,
    adjustment_type: Option<AdjustmentType>,
    contrary_instruction_indicator: Option<ContraryInstructionIndicator>,
    prior_spread_indicator: Option<PriorSpreadIndicator>,
    threshold_amount: Option<ThresholdAmount>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct PositionMaintenanceReportMessage {
    pos_maint_rpt_id: PosMaintRptID,
    pos_trans_type: PosTransType,
    pos_req_id: Option<PosReqID>,
    pos_maint_action: PosMaintAction,
    orig_pos_req_ref_id: OrigPosReqRefID,
    pos_maint_status: PosMaintStatus,
    pos_maint_result: Option<PosMaintResult>,
    clearing_business_date: ClearingBusinessDate,
    settl_sess_id: Option<SettlSessID>,
    settl_sess_sub_id: Option<SettlSessSubID>,
    account: Account,
    acct_id_source: Option<AcctIDSource>,
    account_type: AccountType,
    currency: Option<Currency>,
    transact_time: TransactTime,
    adjustment_type: Option<AdjustmentType>,
    threshold_amount: Option<ThresholdAmount>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct RequestForPositionsMessage {
    pos_req_id: PosReqID,
    pos_req_type: PosReqType,
    match_status: Option<MatchStatus>,
    subscription_request_type: Option<SubscriptionRequestType>,
    account: Account,
    acct_id_source: Option<AcctIDSource>,
    account_type: AccountType,
    currency: Option<Currency>,
    clearing_business_date: ClearingBusinessDate,
    settl_sess_id: Option<SettlSessID>,
    settl_sess_sub_id: Option<SettlSessSubID>,
    transact_time: TransactTime,
    response_transport_type: Option<ResponseTransportType>,
    response_destination: Option<ResponseDestination>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct RequestForPositionsAckMessage {
    pos_maint_rpt_id: PosMaintRptID,
    pos_req_id: Option<PosReqID>,
    total_num_pos_reports: Option<TotalNumPosReports>,
    unsolicited_indicator: Option<UnsolicitedIndicator>,
    pos_req_result: PosReqResult,
    pos_req_status: PosReqStatus,
    account: Account,
    acct_id_source: Option<AcctIDSource>,
    account_type: AccountType,
    currency: Option<Currency>,
    response_transport_type: Option<ResponseTransportType>,
    response_destination: Option<ResponseDestination>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct PositionReportMessage {
    pos_maint_rpt_id: PosMaintRptID,
    pos_req_id: Option<PosReqID>,
    pos_req_type: Option<PosReqType>,
    subscription_request_type: Option<SubscriptionRequestType>,
    total_num_pos_reports: Option<TotalNumPosReports>,
    unsolicited_indicator: Option<UnsolicitedIndicator>,
    pos_req_result: PosReqResult,
    clearing_business_date: ClearingBusinessDate,
    settl_sess_id: Option<SettlSessID>,
    settl_sess_sub_id: Option<SettlSessSubID>,
    account: Account,
    acct_id_source: Option<AcctIDSource>,
    account_type: AccountType,
    currency: Option<Currency>,
    settl_price: SettlPrice,
    settl_price_type: SettlPriceType,
    prior_settl_price: PriorSettlPrice,
    regist_status: Option<RegistStatus>,
    delivery_date: Option<DeliveryDate>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct TradeCaptureReportRequestAckMessage {
    trade_request_id: TradeRequestID,
    trade_request_type: TradeRequestType,
    subscription_request_type: Option<SubscriptionRequestType>,
    tot_num_trade_reports: Option<TotNumTradeReports>,
    trade_request_result: TradeRequestResult,
    trade_request_status: TradeRequestStatus,
    multi_leg_reporting_type: Option<MultiLegReportingType>,
    response_transport_type: Option<ResponseTransportType>,
    response_destination: Option<ResponseDestination>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct TradeCaptureReportAckMessage {
    trade_report_id: TradeReportID,
    trade_report_trans_type: Option<TradeReportTransType>,
    trade_report_type: Option<TradeReportType>,
    trd_type: Option<TrdType>,
    trd_sub_type: Option<TrdSubType>,
    secondary_trd_type: Option<SecondaryTrdType>,
    transfer_reason: Option<TransferReason>,
    exec_type: ExecType,
    trade_report_ref_id: Option<TradeReportRefID>,
    secondary_trade_report_ref_id: Option<SecondaryTradeReportRefID>,
    trd_rpt_status: Option<TrdRptStatus>,
    trade_report_reject_reason: Option<TradeReportRejectReason>,
    secondary_trade_report_id: Option<SecondaryTradeReportID>,
    subscription_request_type: Option<SubscriptionRequestType>,
    trade_link_id: Option<TradeLinkID>,
    trd_match_id: Option<TrdMatchID>,
    exec_id: Option<ExecID>,
    secondary_exec_id: Option<SecondaryExecID>,
    transact_time: Option<TransactTime>,
    response_transport_type: Option<ResponseTransportType>,
    response_destination: Option<ResponseDestination>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    clearing_fee_indicator: Option<ClearingFeeIndicator>,
    order_capacity: Option<OrderCapacity>,
    order_restrictions: Option<OrderRestrictions>,
    cust_order_capacity: Option<CustOrderCapacity>,
    account: Option<Account>,
    acct_id_source: Option<AcctIDSource>,
    account_type: Option<AccountType>,
    position_effect: Option<PositionEffect>,
    prealloc_method: Option<PreallocMethod>,
}
struct AllocationReportMessage {
    alloc_report_id: AllocReportID,
    alloc_id: Option<AllocID>,
    alloc_trans_type: AllocTransType,
    alloc_report_ref_id: Option<AllocReportRefID>,
    alloc_canc_replace_reason: Option<AllocCancReplaceReason>,
    secondary_alloc_id: Option<SecondaryAllocID>,
    alloc_report_type: AllocReportType,
    alloc_status: AllocStatus,
    alloc_rej_code: Option<AllocRejCode>,
    ref_alloc_id: Option<RefAllocID>,
    alloc_intermed_req_type: Option<AllocIntermedReqType>,
    alloc_link_id: Option<AllocLinkID>,
    alloc_link_type: Option<AllocLinkType>,
    booking_ref_id: Option<BookingRefID>,
    alloc_no_orders_type: AllocNoOrdersType,
    previously_reported: Option<PreviouslyReported>,
    reversal_indicator: Option<ReversalIndicator>,
    match_type: Option<MatchType>,
    side: Side,
    quantity: Quantity,
    qty_type: Option<QtyType>,
    last_mkt: Option<LastMkt>,
    trade_origination_date: Option<TradeOriginationDate>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    price_type: Option<PriceType>,
    avg_px: AvgPx,
    avg_par_px: Option<AvgParPx>,
    currency: Option<Currency>,
    avg_px_precision: Option<AvgPxPrecision>,
    trade_date: TradeDate,
    transact_time: Option<TransactTime>,
    settl_type: Option<SettlType>,
    settl_date: Option<SettlDate>,
    booking_type: Option<BookingType>,
    gross_trade_amt: Option<GrossTradeAmt>,
    concession: Option<Concession>,
    total_takedown: Option<TotalTakedown>,
    net_money: Option<NetMoney>,
    position_effect: Option<PositionEffect>,
    auto_accept_indicator: Option<AutoAcceptIndicator>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    num_days_interest: Option<NumDaysInterest>,
    accrued_interest_rate: Option<AccruedInterestRate>,
    accrued_interest_amt: Option<AccruedInterestAmt>,
    total_accrued_interest_amt: Option<TotalAccruedInterestAmt>,
    interest_at_maturity: Option<InterestAtMaturity>,
    end_accrued_interest_amt: Option<EndAccruedInterestAmt>,
    start_cash: Option<StartCash>,
    end_cash: Option<EndCash>,
    legal_confirm: Option<LegalConfirm>,
    tot_no_allocs: Option<TotNoAllocs>,
    last_fragment: Option<LastFragment>,
}
struct AllocationReportAckMessage {
    alloc_report_id: AllocReportID,
    alloc_id: AllocID,
    secondary_alloc_id: Option<SecondaryAllocID>,
    trade_date: Option<TradeDate>,
    transact_time: TransactTime,
    alloc_status: AllocStatus,
    alloc_rej_code: Option<AllocRejCode>,
    alloc_report_type: Option<AllocReportType>,
    alloc_intermed_req_type: Option<AllocIntermedReqType>,
    match_status: Option<MatchStatus>,
    product: Option<Product>,
    security_type: Option<SecurityType>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct ConfirmationAckMessage {
    confirm_id: ConfirmID,
    trade_date: TradeDate,
    transact_time: TransactTime,
    affirm_status: AffirmStatus,
    confirm_rej_reason: Option<ConfirmRejReason>,
    match_status: Option<MatchStatus>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct SettlementInstructionRequestMessage {
    settl_inst_req_id: SettlInstReqID,
    transact_time: TransactTime,
    alloc_account: Option<AllocAccount>,
    alloc_acct_id_source: Option<AllocAcctIDSource>,
    side: Option<Side>,
    product: Option<Product>,
    security_type: Option<SecurityType>,
    c_fi_code: Option<CFICode>,
    effective_time: Option<EffectiveTime>,
    expire_time: Option<ExpireTime>,
    last_update_time: Option<LastUpdateTime>,
    stand_inst_db_type: Option<StandInstDbType>,
    stand_inst_db_name: Option<StandInstDbName>,
    stand_inst_db_id: Option<StandInstDbID>,
}
struct AssignmentReportMessage {
    asgn_rpt_id: AsgnRptID,
    tot_num_assignment_reports: Option<TotNumAssignmentReports>,
    last_rpt_requested: Option<LastRptRequested>,
    account: Option<Account>,
    account_type: AccountType,
    currency: Option<Currency>,
    threshold_amount: Option<ThresholdAmount>,
    settl_price: SettlPrice,
    settl_price_type: SettlPriceType,
    underlying_settl_price: UnderlyingSettlPrice,
    expire_date: Option<ExpireDate>,
    assignment_method: AssignmentMethod,
    assignment_unit: Option<AssignmentUnit>,
    open_interest: OpenInterest,
    exercise_method: ExerciseMethod,
    settl_sess_id: SettlSessID,
    settl_sess_sub_id: SettlSessSubID,
    clearing_business_date: ClearingBusinessDate,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct CollateralRequestMessage {
    coll_req_id: CollReqID,
    coll_asgn_reason: CollAsgnReason,
    transact_time: TransactTime,
    expire_time: Option<ExpireTime>,
    account: Option<Account>,
    account_type: Option<AccountType>,
    cl_ord_id: Option<ClOrdID>,
    order_id: Option<OrderID>,
    secondary_order_id: Option<SecondaryOrderID>,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    settl_date: Option<SettlDate>,
    quantity: Option<Quantity>,
    qty_type: Option<QtyType>,
    currency: Option<Currency>,
    margin_excess: Option<MarginExcess>,
    total_net_value: Option<TotalNetValue>,
    cash_outstanding: Option<CashOutstanding>,
    side: Option<Side>,
    price: Option<Price>,
    price_type: Option<PriceType>,
    accrued_interest_amt: Option<AccruedInterestAmt>,
    end_accrued_interest_amt: Option<EndAccruedInterestAmt>,
    start_cash: Option<StartCash>,
    end_cash: Option<EndCash>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    settl_sess_id: Option<SettlSessID>,
    settl_sess_sub_id: Option<SettlSessSubID>,
    clearing_business_date: Option<ClearingBusinessDate>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct CollateralAssignmentMessage {
    coll_asgn_id: CollAsgnID,
    coll_req_id: Option<CollReqID>,
    coll_asgn_reason: CollAsgnReason,
    coll_asgn_trans_type: CollAsgnTransType,
    coll_asgn_ref_id: Option<CollAsgnRefID>,
    transact_time: TransactTime,
    expire_time: Option<ExpireTime>,
    account: Option<Account>,
    account_type: Option<AccountType>,
    cl_ord_id: Option<ClOrdID>,
    order_id: Option<OrderID>,
    secondary_order_id: Option<SecondaryOrderID>,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    settl_date: Option<SettlDate>,
    quantity: Option<Quantity>,
    qty_type: Option<QtyType>,
    currency: Option<Currency>,
    margin_excess: Option<MarginExcess>,
    total_net_value: Option<TotalNetValue>,
    cash_outstanding: Option<CashOutstanding>,
    side: Option<Side>,
    price: Option<Price>,
    price_type: Option<PriceType>,
    accrued_interest_amt: Option<AccruedInterestAmt>,
    end_accrued_interest_amt: Option<EndAccruedInterestAmt>,
    start_cash: Option<StartCash>,
    end_cash: Option<EndCash>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    settl_sess_id: Option<SettlSessID>,
    settl_sess_sub_id: Option<SettlSessSubID>,
    clearing_business_date: Option<ClearingBusinessDate>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct CollateralResponseMessage {
    coll_resp_id: CollRespID,
    coll_asgn_id: CollAsgnID,
    coll_req_id: Option<CollReqID>,
    coll_asgn_reason: CollAsgnReason,
    coll_asgn_trans_type: Option<CollAsgnTransType>,
    coll_asgn_resp_type: CollAsgnRespType,
    coll_asgn_reject_reason: Option<CollAsgnRejectReason>,
    transact_time: TransactTime,
    account: Option<Account>,
    account_type: Option<AccountType>,
    cl_ord_id: Option<ClOrdID>,
    order_id: Option<OrderID>,
    secondary_order_id: Option<SecondaryOrderID>,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    settl_date: Option<SettlDate>,
    quantity: Option<Quantity>,
    qty_type: Option<QtyType>,
    currency: Option<Currency>,
    margin_excess: Option<MarginExcess>,
    total_net_value: Option<TotalNetValue>,
    cash_outstanding: Option<CashOutstanding>,
    side: Option<Side>,
    price: Option<Price>,
    price_type: Option<PriceType>,
    accrued_interest_amt: Option<AccruedInterestAmt>,
    end_accrued_interest_amt: Option<EndAccruedInterestAmt>,
    start_cash: Option<StartCash>,
    end_cash: Option<EndCash>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct CollateralReportMessage {
    coll_rpt_id: CollRptID,
    coll_inquiry_id: Option<CollInquiryID>,
    coll_status: CollStatus,
    tot_num_reports: Option<TotNumReports>,
    last_rpt_requested: Option<LastRptRequested>,
    account: Option<Account>,
    account_type: Option<AccountType>,
    cl_ord_id: Option<ClOrdID>,
    order_id: Option<OrderID>,
    secondary_order_id: Option<SecondaryOrderID>,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    settl_date: Option<SettlDate>,
    quantity: Option<Quantity>,
    qty_type: Option<QtyType>,
    currency: Option<Currency>,
    margin_excess: Option<MarginExcess>,
    total_net_value: Option<TotalNetValue>,
    cash_outstanding: Option<CashOutstanding>,
    side: Option<Side>,
    price: Option<Price>,
    price_type: Option<PriceType>,
    accrued_interest_amt: Option<AccruedInterestAmt>,
    end_accrued_interest_amt: Option<EndAccruedInterestAmt>,
    start_cash: Option<StartCash>,
    end_cash: Option<EndCash>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    settl_sess_id: Option<SettlSessID>,
    settl_sess_sub_id: Option<SettlSessSubID>,
    clearing_business_date: Option<ClearingBusinessDate>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct CollateralInquiryMessage {
    coll_inquiry_id: Option<CollInquiryID>,
    subscription_request_type: Option<SubscriptionRequestType>,
    response_transport_type: Option<ResponseTransportType>,
    response_destination: Option<ResponseDestination>,
    account: Option<Account>,
    account_type: Option<AccountType>,
    cl_ord_id: Option<ClOrdID>,
    order_id: Option<OrderID>,
    secondary_order_id: Option<SecondaryOrderID>,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    settl_date: Option<SettlDate>,
    quantity: Option<Quantity>,
    qty_type: Option<QtyType>,
    currency: Option<Currency>,
    margin_excess: Option<MarginExcess>,
    total_net_value: Option<TotalNetValue>,
    cash_outstanding: Option<CashOutstanding>,
    side: Option<Side>,
    price: Option<Price>,
    price_type: Option<PriceType>,
    accrued_interest_amt: Option<AccruedInterestAmt>,
    end_accrued_interest_amt: Option<EndAccruedInterestAmt>,
    start_cash: Option<StartCash>,
    end_cash: Option<EndCash>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    settl_sess_id: Option<SettlSessID>,
    settl_sess_sub_id: Option<SettlSessSubID>,
    clearing_business_date: Option<ClearingBusinessDate>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct NetworkCounterpartySystemStatusRequestMessage {
    network_request_type: NetworkRequestType,
    network_request_id: NetworkRequestID,
}
struct NetworkCounterpartySystemStatusResponseMessage {
    network_status_response_type: NetworkStatusResponseType,
    network_request_id: Option<NetworkRequestID>,
    network_response_id: NetworkResponseID,
    last_network_response_id: Option<LastNetworkResponseID>,
}
struct UserRequestMessage {
    user_request_id: UserRequestID,
    user_request_type: UserRequestType,
    username: Username,
    password: Option<Password>,
    new_password: Option<NewPassword>,
    raw_data_length: Option<RawDataLength>,
    raw_data: Option<RawData>,
}
struct UserResponseMessage {
    user_request_id: UserRequestID,
    username: Username,
    user_status: Option<UserStatus>,
    user_status_text: Option<UserStatusText>,
}
struct CollateralInquiryAckMessage {
    coll_inquiry_id: CollInquiryID,
    coll_inquiry_status: CollInquiryStatus,
    coll_inquiry_result: Option<CollInquiryResult>,
    tot_num_reports: Option<TotNumReports>,
    account: Option<Account>,
    account_type: Option<AccountType>,
    cl_ord_id: Option<ClOrdID>,
    order_id: Option<OrderID>,
    secondary_order_id: Option<SecondaryOrderID>,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    settl_date: Option<SettlDate>,
    quantity: Option<Quantity>,
    qty_type: Option<QtyType>,
    currency: Option<Currency>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    settl_sess_id: Option<SettlSessID>,
    settl_sess_sub_id: Option<SettlSessSubID>,
    clearing_business_date: Option<ClearingBusinessDate>,
    response_transport_type: Option<ResponseTransportType>,
    response_destination: Option<ResponseDestination>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct ConfirmationRequestMessage {
    confirm_req_id: ConfirmReqID,
    confirm_type: ConfirmType,
    alloc_id: Option<AllocID>,
    secondary_alloc_id: Option<SecondaryAllocID>,
    individual_alloc_id: Option<IndividualAllocID>,
    transact_time: TransactTime,
    alloc_account: Option<AllocAccount>,
    alloc_acct_id_source: Option<AllocAcctIDSource>,
    alloc_account_type: Option<AllocAccountType>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
