use fix_4_3_0::fields::*;
struct HeartbeatMessage {
    test_req_id: Option<TestReqID>,
}
struct TestRequestMessage {
    test_req_id: TestReqID,
}
struct ResendRequestMessage {
    begin_seq_no: BeginSeqNo,
    end_seq_no: EndSeqNo,
}
struct RejectMessage {
    ref_seq_num: RefSeqNum,
    ref_tag_id: Option<RefTagID>,
    ref_msg_type: Option<RefMsgType>,
    session_reject_reason: Option<SessionRejectReason>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct SequenceResetMessage {
    gap_fill_flag: Option<GapFillFlag>,
    new_seq_no: NewSeqNo,
}
struct LogoutMessage {
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct IOIMessage {
    i_o_iid: IOIid,
    i_oi_trans_type: IOITransType,
    i_oi_ref_id: Option<IOIRefID>,
    side: Side,
    quantity_type: Option<QuantityType>,
    i_oi_qty: IOIQty,
    price_type: Option<PriceType>,
    price: Option<Price>,
    currency: Option<Currency>,
    valid_until_time: Option<ValidUntilTime>,
    i_oi_qlty_ind: Option<IOIQltyInd>,
    i_oi_natural_flag: Option<IOINaturalFlag>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    transact_time: Option<TransactTime>,
    u_rl_link: Option<URLLink>,
    benchmark: Option<Benchmark>,
}
struct AdvertisementMessage {
    adv_id: AdvId,
    adv_trans_type: AdvTransType,
    adv_ref_id: Option<AdvRefID>,
    adv_side: AdvSide,
    quantity: Quantity,
    price: Option<Price>,
    currency: Option<Currency>,
    trade_date: Option<TradeDate>,
    transact_time: Option<TransactTime>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    u_rl_link: Option<URLLink>,
    last_mkt: Option<LastMkt>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
}
struct ExecutionReportMessage {
    order_id: OrderID,
    secondary_order_id: Option<SecondaryOrderID>,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    secondary_exec_id: Option<SecondaryExecID>,
    cl_ord_id: Option<ClOrdID>,
    orig_cl_ord_id: Option<OrigClOrdID>,
    cl_ord_link_id: Option<ClOrdLinkID>,
    trade_origination_date: Option<TradeOriginationDate>,
    list_id: Option<ListID>,
    cross_id: Option<CrossID>,
    orig_cross_id: Option<OrigCrossID>,
    cross_type: Option<CrossType>,
    exec_id: ExecID,
    exec_ref_id: Option<ExecRefID>,
    exec_type: ExecType,
    ord_status: OrdStatus,
    working_indicator: Option<WorkingIndicator>,
    ord_rej_reason: Option<OrdRejReason>,
    exec_restatement_reason: Option<ExecRestatementReason>,
    account: Option<Account>,
    account_type: Option<AccountType>,
    day_booking_inst: Option<DayBookingInst>,
    booking_unit: Option<BookingUnit>,
    prealloc_method: Option<PreallocMethod>,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    cash_margin: Option<CashMargin>,
    clearing_fee_indicator: Option<ClearingFeeIndicator>,
    side: Side,
    quantity_type: Option<QuantityType>,
    ord_type: Option<OrdType>,
    price_type: Option<PriceType>,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    peg_difference: Option<PegDifference>,
    discretion_inst: Option<DiscretionInst>,
    discretion_offset: Option<DiscretionOffset>,
    currency: Option<Currency>,
    compliance_id: Option<ComplianceID>,
    solicited_flag: Option<SolicitedFlag>,
    time_in_force: Option<TimeInForce>,
    effective_time: Option<EffectiveTime>,
    expire_date: Option<ExpireDate>,
    expire_time: Option<ExpireTime>,
    exec_inst: Option<ExecInst>,
    order_capacity: Option<OrderCapacity>,
    order_restrictions: Option<OrderRestrictions>,
    cust_order_capacity: Option<CustOrderCapacity>,
    rule80_a: Option<Rule80A>,
    last_qty: Option<LastQty>,
    underlying_last_qty: Option<UnderlyingLastQty>,
    last_px: Option<LastPx>,
    underlying_last_px: Option<UnderlyingLastPx>,
    last_spot_rate: Option<LastSpotRate>,
    last_forward_points: Option<LastForwardPoints>,
    last_mkt: Option<LastMkt>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    last_capacity: Option<LastCapacity>,
    leaves_qty: LeavesQty,
    cum_qty: CumQty,
    avg_px: AvgPx,
    day_order_qty: Option<DayOrderQty>,
    day_cum_qty: Option<DayCumQty>,
    day_avg_px: Option<DayAvgPx>,
    g_t_booking_inst: Option<GTBookingInst>,
    trade_date: Option<TradeDate>,
    transact_time: Option<TransactTime>,
    report_to_exch: Option<ReportToExch>,
    gross_trade_amt: Option<GrossTradeAmt>,
    num_days_interest: Option<NumDaysInterest>,
    ex_date: Option<ExDate>,
    accrued_interest_rate: Option<AccruedInterestRate>,
    accrued_interest_amt: Option<AccruedInterestAmt>,
    traded_flat_switch: Option<TradedFlatSwitch>,
    basis_feature_date: Option<BasisFeatureDate>,
    basis_feature_price: Option<BasisFeaturePrice>,
    concession: Option<Concession>,
    total_takedown: Option<TotalTakedown>,
    net_money: Option<NetMoney>,
    settl_curr_amt: Option<SettlCurrAmt>,
    settl_currency: Option<SettlCurrency>,
    settl_curr_fx_rate: Option<SettlCurrFxRate>,
    settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
    handl_inst: Option<HandlInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    position_effect: Option<PositionEffect>,
    max_show: Option<MaxShow>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    fut_sett_date2: Option<FutSettDate2>,
    order_qty2: Option<OrderQty2>,
    last_forward_points2: Option<LastForwardPoints2>,
    multi_leg_reporting_type: Option<MultiLegReportingType>,
    cancellation_rights: Option<CancellationRights>,
    money_laundering_status: Option<MoneyLaunderingStatus>,
    regist_id: Option<RegistID>,
    designation: Option<Designation>,
    trans_bkd_time: Option<TransBkdTime>,
    exec_valuation_point: Option<ExecValuationPoint>,
    exec_price_type: Option<ExecPriceType>,
    exec_price_adjustment: Option<ExecPriceAdjustment>,
    priority_indicator: Option<PriorityIndicator>,
    price_improvement: Option<PriceImprovement>,
}
struct OrderCancelRejectMessage {
    order_id: OrderID,
    secondary_order_id: Option<SecondaryOrderID>,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    cl_ord_id: ClOrdID,
    cl_ord_link_id: Option<ClOrdLinkID>,
    orig_cl_ord_id: OrigClOrdID,
    ord_status: OrdStatus,
    working_indicator: Option<WorkingIndicator>,
    orig_ord_mod_time: Option<OrigOrdModTime>,
    list_id: Option<ListID>,
    account: Option<Account>,
    account_type: Option<AccountType>,
    trade_origination_date: Option<TradeOriginationDate>,
    transact_time: Option<TransactTime>,
    cxl_rej_response_to: CxlRejResponseTo,
    cxl_rej_reason: Option<CxlRejReason>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct LogonMessage {
    encrypt_method: EncryptMethod,
    heart_bt_int: HeartBtInt,
    raw_data_length: Option<RawDataLength>,
    raw_data: Option<RawData>,
    reset_seq_num_flag: Option<ResetSeqNumFlag>,
    max_message_size: Option<MaxMessageSize>,
    test_message_indicator: Option<TestMessageIndicator>,
    username: Option<Username>,
    password: Option<Password>,
}
struct NewsMessage {
    orig_time: Option<OrigTime>,
    urgency: Option<Urgency>,
    headline: Headline,
    encoded_headline_len: Option<EncodedHeadlineLen>,
    encoded_headline: Option<EncodedHeadline>,
    u_rl_link: Option<URLLink>,
    raw_data_length: Option<RawDataLength>,
    raw_data: Option<RawData>,
}
struct EmailMessage {
    email_thread_id: EmailThreadID,
    email_type: EmailType,
    orig_time: Option<OrigTime>,
    subject: Subject,
    encoded_subject_len: Option<EncodedSubjectLen>,
    encoded_subject: Option<EncodedSubject>,
    order_id: Option<OrderID>,
    cl_ord_id: Option<ClOrdID>,
    raw_data_length: Option<RawDataLength>,
    raw_data: Option<RawData>,
}
struct NewOrderSingleMessage {
    cl_ord_id: ClOrdID,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    cl_ord_link_id: Option<ClOrdLinkID>,
    trade_origination_date: Option<TradeOriginationDate>,
    account: Option<Account>,
    account_type: Option<AccountType>,
    day_booking_inst: Option<DayBookingInst>,
    booking_unit: Option<BookingUnit>,
    prealloc_method: Option<PreallocMethod>,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    cash_margin: Option<CashMargin>,
    clearing_fee_indicator: Option<ClearingFeeIndicator>,
    handl_inst: HandlInst,
    exec_inst: Option<ExecInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    ex_destination: Option<ExDestination>,
    process_code: Option<ProcessCode>,
    prev_close_px: Option<PrevClosePx>,
    side: Side,
    locate_reqd: Option<LocateReqd>,
    transact_time: TransactTime,
    quantity_type: Option<QuantityType>,
    ord_type: OrdType,
    price_type: Option<PriceType>,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    currency: Option<Currency>,
    compliance_id: Option<ComplianceID>,
    solicited_flag: Option<SolicitedFlag>,
    i_o_iid: Option<IOIid>,
    quote_id: Option<QuoteID>,
    time_in_force: Option<TimeInForce>,
    effective_time: Option<EffectiveTime>,
    expire_date: Option<ExpireDate>,
    expire_time: Option<ExpireTime>,
    g_t_booking_inst: Option<GTBookingInst>,
    order_capacity: Option<OrderCapacity>,
    order_restrictions: Option<OrderRestrictions>,
    cust_order_capacity: Option<CustOrderCapacity>,
    rule80_a: Option<Rule80A>,
    forex_req: Option<ForexReq>,
    settl_currency: Option<SettlCurrency>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    fut_sett_date2: Option<FutSettDate2>,
    order_qty2: Option<OrderQty2>,
    price2: Option<Price2>,
    position_effect: Option<PositionEffect>,
    covered_or_uncovered: Option<CoveredOrUncovered>,
    max_show: Option<MaxShow>,
    peg_difference: Option<PegDifference>,
    discretion_inst: Option<DiscretionInst>,
    discretion_offset: Option<DiscretionOffset>,
    cancellation_rights: Option<CancellationRights>,
    money_laundering_status: Option<MoneyLaunderingStatus>,
    regist_id: Option<RegistID>,
    designation: Option<Designation>,
    accrued_interest_rate: Option<AccruedInterestRate>,
    accrued_interest_amt: Option<AccruedInterestAmt>,
    net_money: Option<NetMoney>,
}
struct NewOrderListMessage {
    list_id: ListID,
    bid_id: Option<BidID>,
    client_bid_id: Option<ClientBidID>,
    prog_rpt_reqs: Option<ProgRptReqs>,
    bid_type: BidType,
    prog_period_interval: Option<ProgPeriodInterval>,
    cancellation_rights: Option<CancellationRights>,
    money_laundering_status: Option<MoneyLaunderingStatus>,
    regist_id: Option<RegistID>,
    list_exec_inst_type: Option<ListExecInstType>,
    list_exec_inst: Option<ListExecInst>,
    encoded_list_exec_inst_len: Option<EncodedListExecInstLen>,
    encoded_list_exec_inst: Option<EncodedListExecInst>,
    tot_no_orders: TotNoOrders,
}
struct OrderCancelRequestMessage {
    orig_cl_ord_id: OrigClOrdID,
    order_id: Option<OrderID>,
    cl_ord_id: ClOrdID,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    cl_ord_link_id: Option<ClOrdLinkID>,
    list_id: Option<ListID>,
    orig_ord_mod_time: Option<OrigOrdModTime>,
    account: Option<Account>,
    account_type: Option<AccountType>,
    side: Side,
    transact_time: TransactTime,
    compliance_id: Option<ComplianceID>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct OrderCancelReplaceRequestMessage {
    order_id: Option<OrderID>,
    trade_origination_date: Option<TradeOriginationDate>,
    orig_cl_ord_id: OrigClOrdID,
    cl_ord_id: ClOrdID,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    cl_ord_link_id: Option<ClOrdLinkID>,
    list_id: Option<ListID>,
    orig_ord_mod_time: Option<OrigOrdModTime>,
    account: Option<Account>,
    account_type: Option<AccountType>,
    day_booking_inst: Option<DayBookingInst>,
    booking_unit: Option<BookingUnit>,
    prealloc_method: Option<PreallocMethod>,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    cash_margin: Option<CashMargin>,
    clearing_fee_indicator: Option<ClearingFeeIndicator>,
    handl_inst: HandlInst,
    exec_inst: Option<ExecInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    ex_destination: Option<ExDestination>,
    side: Side,
    transact_time: TransactTime,
    quantity_type: Option<QuantityType>,
    ord_type: OrdType,
    price_type: Option<PriceType>,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    peg_difference: Option<PegDifference>,
    discretion_inst: Option<DiscretionInst>,
    discretion_offset: Option<DiscretionOffset>,
    compliance_id: Option<ComplianceID>,
    solicited_flag: Option<SolicitedFlag>,
    currency: Option<Currency>,
    time_in_force: Option<TimeInForce>,
    effective_time: Option<EffectiveTime>,
    expire_date: Option<ExpireDate>,
    expire_time: Option<ExpireTime>,
    g_t_booking_inst: Option<GTBookingInst>,
    order_capacity: Option<OrderCapacity>,
    order_restrictions: Option<OrderRestrictions>,
    cust_order_capacity: Option<CustOrderCapacity>,
    rule80_a: Option<Rule80A>,
    forex_req: Option<ForexReq>,
    settl_currency: Option<SettlCurrency>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    fut_sett_date2: Option<FutSettDate2>,
    order_qty2: Option<OrderQty2>,
    price2: Option<Price2>,
    position_effect: Option<PositionEffect>,
    covered_or_uncovered: Option<CoveredOrUncovered>,
    max_show: Option<MaxShow>,
    locate_reqd: Option<LocateReqd>,
    cancellation_rights: Option<CancellationRights>,
    money_laundering_status: Option<MoneyLaunderingStatus>,
    regist_id: Option<RegistID>,
    designation: Option<Designation>,
    accrued_interest_rate: Option<AccruedInterestRate>,
    accrued_interest_amt: Option<AccruedInterestAmt>,
    net_money: Option<NetMoney>,
}
struct OrderStatusRequestMessage {
    order_id: Option<OrderID>,
    cl_ord_id: ClOrdID,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    cl_ord_link_id: Option<ClOrdLinkID>,
    account: Option<Account>,
    side: Side,
}
struct AllocationMessage {
    alloc_id: AllocID,
    alloc_trans_type: AllocTransType,
    alloc_type: AllocType,
    ref_alloc_id: Option<RefAllocID>,
    alloc_link_id: Option<AllocLinkID>,
    alloc_link_type: Option<AllocLinkType>,
    booking_ref_id: Option<BookingRefID>,
    side: Side,
    quantity: Quantity,
    last_mkt: Option<LastMkt>,
    trade_origination_date: Option<TradeOriginationDate>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    price_type: Option<PriceType>,
    avg_px: AvgPx,
    currency: Option<Currency>,
    avg_prx_precision: Option<AvgPrxPrecision>,
    trade_date: TradeDate,
    transact_time: Option<TransactTime>,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    gross_trade_amt: Option<GrossTradeAmt>,
    concession: Option<Concession>,
    total_takedown: Option<TotalTakedown>,
    net_money: Option<NetMoney>,
    position_effect: Option<PositionEffect>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    num_days_interest: Option<NumDaysInterest>,
    accrued_interest_rate: Option<AccruedInterestRate>,
    total_accrued_interest_amt: Option<TotalAccruedInterestAmt>,
    legal_confirm: Option<LegalConfirm>,
}
struct ListCancelRequestMessage {
    list_id: ListID,
    transact_time: TransactTime,
    trade_origination_date: Option<TradeOriginationDate>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct ListExecuteMessage {
    list_id: ListID,
    client_bid_id: Option<ClientBidID>,
    bid_id: Option<BidID>,
    transact_time: TransactTime,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct ListStatusRequestMessage {
    list_id: ListID,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct ListStatusMessage {
    list_id: ListID,
    list_status_type: ListStatusType,
    no_rpts: NoRpts,
    list_order_status: ListOrderStatus,
    rpt_seq: RptSeq,
    list_status_text: Option<ListStatusText>,
    encoded_list_status_text_len: Option<EncodedListStatusTextLen>,
    encoded_list_status_text: Option<EncodedListStatusText>,
    transact_time: Option<TransactTime>,
    tot_no_orders: TotNoOrders,
}
struct AllocationAckMessage {
    alloc_id: AllocID,
    trade_date: TradeDate,
    transact_time: Option<TransactTime>,
    alloc_status: AllocStatus,
    alloc_rej_code: Option<AllocRejCode>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    legal_confirm: Option<LegalConfirm>,
}
struct DontKnowTradeMessage {
    order_id: OrderID,
    exec_id: ExecID,
    d_k_reason: DKReason,
    side: Side,
    last_qty: Option<LastQty>,
    last_px: Option<LastPx>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct QuoteRequestMessage {
    quote_req_id: QuoteReqID,
    r_fq_req_id: Option<RFQReqID>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct QuoteMessage {
    quote_req_id: Option<QuoteReqID>,
    quote_id: QuoteID,
    quote_type: Option<QuoteType>,
    quote_response_level: Option<QuoteResponseLevel>,
    account: Option<Account>,
    account_type: Option<AccountType>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    bid_px: Option<BidPx>,
    offer_px: Option<OfferPx>,
    mkt_bid_px: Option<MktBidPx>,
    mkt_offer_px: Option<MktOfferPx>,
    min_bid_size: Option<MinBidSize>,
    bid_size: Option<BidSize>,
    min_offer_size: Option<MinOfferSize>,
    offer_size: Option<OfferSize>,
    valid_until_time: Option<ValidUntilTime>,
    bid_spot_rate: Option<BidSpotRate>,
    offer_spot_rate: Option<OfferSpotRate>,
    bid_forward_points: Option<BidForwardPoints>,
    offer_forward_points: Option<OfferForwardPoints>,
    mid_px: Option<MidPx>,
    bid_yield: Option<BidYield>,
    mid_yield: Option<MidYield>,
    offer_yield: Option<OfferYield>,
    transact_time: Option<TransactTime>,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    ord_type: Option<OrdType>,
    fut_sett_date2: Option<FutSettDate2>,
    order_qty2: Option<OrderQty2>,
    bid_forward_points2: Option<BidForwardPoints2>,
    offer_forward_points2: Option<OfferForwardPoints2>,
    currency: Option<Currency>,
    settl_curr_bid_fx_rate: Option<SettlCurrBidFxRate>,
    settl_curr_offer_fx_rate: Option<SettlCurrOfferFxRate>,
    settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
    commission: Option<Commission>,
    comm_type: Option<CommType>,
    cust_order_capacity: Option<CustOrderCapacity>,
    ex_destination: Option<ExDestination>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct SettlementInstructionsMessage {
    settl_inst_id: SettlInstID,
    settl_inst_trans_type: SettlInstTransType,
    settl_inst_ref_id: SettlInstRefID,
    settl_inst_mode: SettlInstMode,
    settl_inst_source: SettlInstSource,
    alloc_account: AllocAccount,
    individual_alloc_id: Option<IndividualAllocID>,
    cl_ord_id: Option<ClOrdID>,
    trade_date: Option<TradeDate>,
    alloc_id: Option<AllocID>,
    last_mkt: Option<LastMkt>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    side: Option<Side>,
    security_type: Option<SecurityType>,
    effective_time: Option<EffectiveTime>,
    transact_time: TransactTime,
    stand_inst_db_type: Option<StandInstDbType>,
    stand_inst_db_name: Option<StandInstDbName>,
    stand_inst_db_id: Option<StandInstDbID>,
    settl_delivery_type: Option<SettlDeliveryType>,
    settl_depository_code: Option<SettlDepositoryCode>,
    settl_brkr_code: Option<SettlBrkrCode>,
    settl_inst_code: Option<SettlInstCode>,
    security_settl_agent_name: Option<SecuritySettlAgentName>,
    security_settl_agent_code: Option<SecuritySettlAgentCode>,
    security_settl_agent_acct_num: Option<SecuritySettlAgentAcctNum>,
    security_settl_agent_acct_name: Option<SecuritySettlAgentAcctName>,
    security_settl_agent_contact_name: Option<SecuritySettlAgentContactName>,
    security_settl_agent_contact_phone: Option<SecuritySettlAgentContactPhone>,
    cash_settl_agent_name: Option<CashSettlAgentName>,
    cash_settl_agent_code: Option<CashSettlAgentCode>,
    cash_settl_agent_acct_num: Option<CashSettlAgentAcctNum>,
    cash_settl_agent_acct_name: Option<CashSettlAgentAcctName>,
    cash_settl_agent_contact_name: Option<CashSettlAgentContactName>,
    cash_settl_agent_contact_phone: Option<CashSettlAgentContactPhone>,
    payment_method: Option<PaymentMethod>,
    payment_ref: Option<PaymentRef>,
    card_holder_name: Option<CardHolderName>,
    card_number: Option<CardNumber>,
    card_start_date: Option<CardStartDate>,
    card_exp_date: Option<CardExpDate>,
    card_iss_no: Option<CardIssNo>,
    payment_date: Option<PaymentDate>,
    payment_remitter_id: Option<PaymentRemitterID>,
}
struct MarketDataRequestMessage {
    m_d_req_id: MDReqID,
    subscription_request_type: SubscriptionRequestType,
    market_depth: MarketDepth,
    m_d_update_type: Option<MDUpdateType>,
    aggregated_book: Option<AggregatedBook>,
    open_close_settle_flag: Option<OpenCloseSettleFlag>,
    scope: Option<Scope>,
    m_d_implicit_delete: Option<MDImplicitDelete>,
}
struct MarketDataSnapshotFullRefreshMessage {
    m_d_req_id: Option<MDReqID>,
    financial_status: Option<FinancialStatus>,
    corporate_action: Option<CorporateAction>,
    total_volume_traded: Option<TotalVolumeTraded>,
    total_volume_traded_date: Option<TotalVolumeTradedDate>,
    total_volume_traded_time: Option<TotalVolumeTradedTime>,
    net_chg_prev_day: Option<NetChgPrevDay>,
}
struct MarketDataIncrementalRefreshMessage {
    m_d_req_id: Option<MDReqID>,
}
struct MarketDataRequestRejectMessage {
    m_d_req_id: MDReqID,
    m_d_req_rej_reason: Option<MDReqRejReason>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct QuoteCancelMessage {
    quote_req_id: Option<QuoteReqID>,
    quote_id: QuoteID,
    quote_cancel_type: QuoteCancelType,
    quote_response_level: Option<QuoteResponseLevel>,
    account: Option<Account>,
    account_type: Option<AccountType>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
}
struct QuoteStatusRequestMessage {
    quote_status_req_id: Option<QuoteStatusReqID>,
    quote_id: Option<QuoteID>,
    account: Option<Account>,
    account_type: Option<AccountType>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    subscription_request_type: Option<SubscriptionRequestType>,
}
struct MassQuoteAcknowledgementMessage {
    quote_req_id: Option<QuoteReqID>,
    quote_id: Option<QuoteID>,
    quote_status: QuoteStatus,
    quote_reject_reason: Option<QuoteRejectReason>,
    quote_response_level: Option<QuoteResponseLevel>,
    quote_type: Option<QuoteType>,
    account: Option<Account>,
    account_type: Option<AccountType>,
    text: Option<Text>,
}
struct SecurityDefinitionRequestMessage {
    security_req_id: SecurityReqID,
    security_request_type: SecurityRequestType,
    currency: Option<Currency>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    subscription_request_type: Option<SubscriptionRequestType>,
}
struct SecurityDefinitionMessage {
    security_req_id: SecurityReqID,
    security_response_id: SecurityResponseID,
    security_response_type: SecurityResponseType,
    currency: Option<Currency>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    round_lot: Option<RoundLot>,
    min_trade_vol: Option<MinTradeVol>,
}
struct SecurityStatusRequestMessage {
    security_status_req_id: SecurityStatusReqID,
    currency: Option<Currency>,
    subscription_request_type: SubscriptionRequestType,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
}
struct SecurityStatusMessage {
    security_status_req_id: Option<SecurityStatusReqID>,
    currency: Option<Currency>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    unsolicited_indicator: Option<UnsolicitedIndicator>,
    security_trading_status: Option<SecurityTradingStatus>,
    financial_status: Option<FinancialStatus>,
    corporate_action: Option<CorporateAction>,
    halt_reason_char: Option<HaltReasonChar>,
    in_view_of_common: Option<InViewOfCommon>,
    due_to_related: Option<DueToRelated>,
    buy_volume: Option<BuyVolume>,
    sell_volume: Option<SellVolume>,
    high_px: Option<HighPx>,
    low_px: Option<LowPx>,
    last_px: Option<LastPx>,
    transact_time: Option<TransactTime>,
    adjustment: Option<Adjustment>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct TradingSessionStatusRequestMessage {
    trad_ses_req_id: TradSesReqID,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    trad_ses_method: Option<TradSesMethod>,
    trad_ses_mode: Option<TradSesMode>,
    subscription_request_type: SubscriptionRequestType,
}
struct TradingSessionStatusMessage {
    trad_ses_req_id: Option<TradSesReqID>,
    trading_session_id: TradingSessionID,
    trading_session_sub_id: Option<TradingSessionSubID>,
    trad_ses_method: Option<TradSesMethod>,
    trad_ses_mode: Option<TradSesMode>,
    unsolicited_indicator: Option<UnsolicitedIndicator>,
    trad_ses_status: TradSesStatus,
    trad_ses_status_rej_reason: Option<TradSesStatusRejReason>,
    trad_ses_start_time: Option<TradSesStartTime>,
    trad_ses_open_time: Option<TradSesOpenTime>,
    trad_ses_pre_close_time: Option<TradSesPreCloseTime>,
    trad_ses_close_time: Option<TradSesCloseTime>,
    trad_ses_end_time: Option<TradSesEndTime>,
    total_volume_traded: Option<TotalVolumeTraded>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct MassQuoteMessage {
    quote_req_id: Option<QuoteReqID>,
    quote_id: QuoteID,
    quote_type: Option<QuoteType>,
    quote_response_level: Option<QuoteResponseLevel>,
    account: Option<Account>,
    account_type: Option<AccountType>,
    def_bid_size: Option<DefBidSize>,
    def_offer_size: Option<DefOfferSize>,
}
struct BusinessMessageRejectMessage {
    ref_seq_num: Option<RefSeqNum>,
    ref_msg_type: RefMsgType,
    business_reject_ref_id: Option<BusinessRejectRefID>,
    business_reject_reason: BusinessRejectReason,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct BidRequestMessage {
    bid_id: Option<BidID>,
    client_bid_id: ClientBidID,
    bid_request_trans_type: BidRequestTransType,
    list_name: Option<ListName>,
    total_num_securities: TotalNumSecurities,
    bid_type: BidType,
    num_tickets: Option<NumTickets>,
    currency: Option<Currency>,
    side_value1: Option<SideValue1>,
    side_value2: Option<SideValue2>,
    liquidity_ind_type: Option<LiquidityIndType>,
    wt_average_liquidity: Option<WtAverageLiquidity>,
    exchange_for_physical: Option<ExchangeForPhysical>,
    out_main_cntry_u_index: Option<OutMainCntryUIndex>,
    cross_percent: Option<CrossPercent>,
    prog_rpt_reqs: Option<ProgRptReqs>,
    prog_period_interval: Option<ProgPeriodInterval>,
    inc_tax_ind: Option<IncTaxInd>,
    forex_req: Option<ForexReq>,
    num_bidders: Option<NumBidders>,
    trade_date: Option<TradeDate>,
    trade_type: TradeType,
    basis_px_type: BasisPxType,
    strike_time: Option<StrikeTime>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct BidResponseMessage {
    bid_id: Option<BidID>,
    client_bid_id: Option<ClientBidID>,
}
struct ListStrikePriceMessage {
    list_id: ListID,
    tot_no_strikes: TotNoStrikes,
}
struct XMLnonFIXMessage {  }
struct RegistrationInstructionsMessage {
    regist_id: RegistID,
    regist_trans_type: RegistTransType,
    regist_ref_id: RegistRefID,
    cl_ord_id: Option<ClOrdID>,
    account: Option<Account>,
    regist_acct_type: Option<RegistAcctType>,
    tax_advantage_type: Option<TaxAdvantageType>,
    ownership_type: Option<OwnershipType>,
}
struct RegistrationInstructionsResponseMessage {
    regist_id: RegistID,
    regist_trans_type: RegistTransType,
    regist_ref_id: RegistRefID,
    cl_ord_id: Option<ClOrdID>,
    account: Option<Account>,
    regist_status: RegistStatus,
    regist_rej_reason_code: Option<RegistRejReasonCode>,
    regist_rej_reason_text: Option<RegistRejReasonText>,
}
struct OrderMassCancelRequestMessage {
    cl_ord_id: ClOrdID,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    mass_cancel_request_type: MassCancelRequestType,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    side: Option<Side>,
    transact_time: TransactTime,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct OrderMassCancelReportMessage {
    cl_ord_id: Option<ClOrdID>,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    order_id: OrderID,
    secondary_order_id: Option<SecondaryOrderID>,
    mass_cancel_request_type: MassCancelRequestType,
    mass_cancel_response: MassCancelResponse,
    mass_cancel_reject_reason: Option<MassCancelRejectReason>,
    total_affected_orders: Option<TotalAffectedOrders>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    side: Option<Side>,
    transact_time: Option<TransactTime>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct NewOrderCrossMessage {
    cross_id: CrossID,
    cross_type: CrossType,
    cross_prioritization: CrossPrioritization,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    handl_inst: HandlInst,
    exec_inst: Option<ExecInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    ex_destination: Option<ExDestination>,
    process_code: Option<ProcessCode>,
    prev_close_px: Option<PrevClosePx>,
    locate_reqd: Option<LocateReqd>,
    transact_time: TransactTime,
    ord_type: OrdType,
    price_type: Option<PriceType>,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    currency: Option<Currency>,
    compliance_id: Option<ComplianceID>,
    i_o_iid: Option<IOIid>,
    quote_id: Option<QuoteID>,
    time_in_force: Option<TimeInForce>,
    effective_time: Option<EffectiveTime>,
    expire_date: Option<ExpireDate>,
    expire_time: Option<ExpireTime>,
    g_t_booking_inst: Option<GTBookingInst>,
    max_show: Option<MaxShow>,
    peg_difference: Option<PegDifference>,
    discretion_inst: Option<DiscretionInst>,
    discretion_offset: Option<DiscretionOffset>,
    cancellation_rights: Option<CancellationRights>,
    money_laundering_status: Option<MoneyLaunderingStatus>,
    regist_id: Option<RegistID>,
    designation: Option<Designation>,
    accrued_interest_rate: Option<AccruedInterestRate>,
    accrued_interest_amt: Option<AccruedInterestAmt>,
    net_money: Option<NetMoney>,
}
struct CrossOrderCancelRequestMessage {
    order_id: Option<OrderID>,
    cross_id: CrossID,
    orig_cross_id: OrigCrossID,
    cross_type: CrossType,
    cross_prioritization: CrossPrioritization,
    transact_time: TransactTime,
}
struct CrossOrderCancelReplaceRequestMessage {
    order_id: Option<OrderID>,
    cross_id: CrossID,
    orig_cross_id: OrigCrossID,
    cross_type: CrossType,
    cross_prioritization: CrossPrioritization,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    handl_inst: HandlInst,
    exec_inst: Option<ExecInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    ex_destination: Option<ExDestination>,
    process_code: Option<ProcessCode>,
    prev_close_px: Option<PrevClosePx>,
    locate_reqd: Option<LocateReqd>,
    transact_time: TransactTime,
    ord_type: OrdType,
    price_type: Option<PriceType>,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    currency: Option<Currency>,
    compliance_id: Option<ComplianceID>,
    i_o_iid: Option<IOIid>,
    quote_id: Option<QuoteID>,
    time_in_force: Option<TimeInForce>,
    effective_time: Option<EffectiveTime>,
    expire_date: Option<ExpireDate>,
    expire_time: Option<ExpireTime>,
    g_t_booking_inst: Option<GTBookingInst>,
    max_show: Option<MaxShow>,
    peg_difference: Option<PegDifference>,
    discretion_inst: Option<DiscretionInst>,
    discretion_offset: Option<DiscretionOffset>,
    cancellation_rights: Option<CancellationRights>,
    money_laundering_status: Option<MoneyLaunderingStatus>,
    regist_id: Option<RegistID>,
    designation: Option<Designation>,
    accrued_interest_rate: Option<AccruedInterestRate>,
    accrued_interest_amt: Option<AccruedInterestAmt>,
    net_money: Option<NetMoney>,
}
struct SecurityTypeRequestMessage {
    security_req_id: SecurityReqID,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
}
struct SecurityTypesMessage {
    security_req_id: SecurityReqID,
    security_response_id: SecurityResponseID,
    security_response_type: SecurityResponseType,
    total_num_security_types: Option<TotalNumSecurityTypes>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    subscription_request_type: Option<SubscriptionRequestType>,
}
struct SecurityListRequestMessage {
    security_req_id: SecurityReqID,
    security_list_request_type: SecurityListRequestType,
    currency: Option<Currency>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    subscription_request_type: Option<SubscriptionRequestType>,
}
struct SecurityListMessage {
    security_req_id: SecurityReqID,
    security_response_id: SecurityResponseID,
    security_request_result: SecurityRequestResult,
    total_num_securities: Option<TotalNumSecurities>,
}
struct DerivativeSecurityListRequestMessage {
    security_req_id: SecurityReqID,
    security_list_request_type: SecurityListRequestType,
    currency: Option<Currency>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    subscription_request_type: Option<SubscriptionRequestType>,
}
struct DerivativeSecurityListMessage {
    security_req_id: SecurityReqID,
    security_response_id: SecurityResponseID,
    security_request_result: SecurityRequestResult,
    total_num_securities: Option<TotalNumSecurities>,
}
struct NewOrderMultilegMessage {
    cl_ord_id: ClOrdID,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    cl_ord_link_id: Option<ClOrdLinkID>,
    account: Option<Account>,
    account_type: Option<AccountType>,
    day_booking_inst: Option<DayBookingInst>,
    booking_unit: Option<BookingUnit>,
    prealloc_method: Option<PreallocMethod>,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    cash_margin: Option<CashMargin>,
    clearing_fee_indicator: Option<ClearingFeeIndicator>,
    handl_inst: HandlInst,
    exec_inst: Option<ExecInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    ex_destination: Option<ExDestination>,
    process_code: Option<ProcessCode>,
    side: Side,
    prev_close_px: Option<PrevClosePx>,
    locate_reqd: Option<LocateReqd>,
    transact_time: TransactTime,
    quantity_type: Option<QuantityType>,
    ord_type: OrdType,
    price_type: Option<PriceType>,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    currency: Option<Currency>,
    compliance_id: Option<ComplianceID>,
    solicited_flag: Option<SolicitedFlag>,
    i_o_iid: Option<IOIid>,
    quote_id: Option<QuoteID>,
    time_in_force: Option<TimeInForce>,
    effective_time: Option<EffectiveTime>,
    expire_date: Option<ExpireDate>,
    expire_time: Option<ExpireTime>,
    g_t_booking_inst: Option<GTBookingInst>,
    order_capacity: Option<OrderCapacity>,
    order_restrictions: Option<OrderRestrictions>,
    cust_order_capacity: Option<CustOrderCapacity>,
    forex_req: Option<ForexReq>,
    settl_currency: Option<SettlCurrency>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    position_effect: Option<PositionEffect>,
    covered_or_uncovered: Option<CoveredOrUncovered>,
    max_show: Option<MaxShow>,
    peg_difference: Option<PegDifference>,
    discretion_inst: Option<DiscretionInst>,
    discretion_offset: Option<DiscretionOffset>,
    cancellation_rights: Option<CancellationRights>,
    money_laundering_status: Option<MoneyLaunderingStatus>,
    regist_id: Option<RegistID>,
    designation: Option<Designation>,
    multi_leg_rpt_type_req: Option<MultiLegRptTypeReq>,
    net_money: Option<NetMoney>,
}
struct MultilegOrderCancelReplaceRequestMessage {
    order_id: Option<OrderID>,
    orig_cl_ord_id: OrigClOrdID,
    cl_ord_id: ClOrdID,
    secondary_cl_ord_id: Option<SecondaryClOrdID>,
    cl_ord_link_id: Option<ClOrdLinkID>,
    orig_ord_mod_time: Option<OrigOrdModTime>,
    account: Option<Account>,
    account_type: Option<AccountType>,
    day_booking_inst: Option<DayBookingInst>,
    booking_unit: Option<BookingUnit>,
    prealloc_method: Option<PreallocMethod>,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    cash_margin: Option<CashMargin>,
    clearing_fee_indicator: Option<ClearingFeeIndicator>,
    handl_inst: HandlInst,
    exec_inst: Option<ExecInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    ex_destination: Option<ExDestination>,
    process_code: Option<ProcessCode>,
    side: Side,
    prev_close_px: Option<PrevClosePx>,
    locate_reqd: Option<LocateReqd>,
    transact_time: TransactTime,
    quantity_type: Option<QuantityType>,
    ord_type: OrdType,
    price_type: Option<PriceType>,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    currency: Option<Currency>,
    compliance_id: Option<ComplianceID>,
    solicited_flag: Option<SolicitedFlag>,
    i_o_iid: Option<IOIid>,
    quote_id: Option<QuoteID>,
    time_in_force: Option<TimeInForce>,
    effective_time: Option<EffectiveTime>,
    expire_date: Option<ExpireDate>,
    expire_time: Option<ExpireTime>,
    g_t_booking_inst: Option<GTBookingInst>,
    order_capacity: Option<OrderCapacity>,
    order_restrictions: Option<OrderRestrictions>,
    cust_order_capacity: Option<CustOrderCapacity>,
    forex_req: Option<ForexReq>,
    settl_currency: Option<SettlCurrency>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    position_effect: Option<PositionEffect>,
    covered_or_uncovered: Option<CoveredOrUncovered>,
    max_show: Option<MaxShow>,
    peg_difference: Option<PegDifference>,
    discretion_inst: Option<DiscretionInst>,
    discretion_offset: Option<DiscretionOffset>,
    cancellation_rights: Option<CancellationRights>,
    money_laundering_status: Option<MoneyLaunderingStatus>,
    regist_id: Option<RegistID>,
    designation: Option<Designation>,
    multi_leg_rpt_type_req: Option<MultiLegRptTypeReq>,
    net_money: Option<NetMoney>,
}
struct TradeCaptureReportRequestMessage {
    trade_request_id: TradeRequestID,
    trade_request_type: TradeRequestType,
    subscription_request_type: Option<SubscriptionRequestType>,
    exec_id: Option<ExecID>,
    order_id: Option<OrderID>,
    cl_ord_id: Option<ClOrdID>,
    match_status: Option<MatchStatus>,
    side: Option<Side>,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
    trade_input_source: Option<TradeInputSource>,
    trade_input_device: Option<TradeInputDevice>,
}
struct TradeCaptureReportMessage {
    trade_report_id: TradeReportID,
    trade_report_trans_type: Option<TradeReportTransType>,
    trade_request_id: Option<TradeRequestID>,
    exec_type: ExecType,
    trade_report_ref_id: Option<TradeReportRefID>,
    exec_id: Option<ExecID>,
    secondary_exec_id: Option<SecondaryExecID>,
    exec_restatement_reason: Option<ExecRestatementReason>,
    previously_reported: PreviouslyReported,
    last_qty: LastQty,
    last_px: LastPx,
    last_spot_rate: Option<LastSpotRate>,
    last_forward_points: Option<LastForwardPoints>,
    last_mkt: Option<LastMkt>,
    trade_date: TradeDate,
    transact_time: TransactTime,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    match_status: Option<MatchStatus>,
    match_type: Option<MatchType>,
}
struct OrderMassStatusRequestMessage {
    mass_status_req_id: MassStatusReqID,
    mass_status_req_type: MassStatusReqType,
    account: Option<Account>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    side: Option<Side>,
}
struct QuoteRequestRejectMessage {
    quote_req_id: QuoteReqID,
    r_fq_req_id: Option<RFQReqID>,
    quote_request_reject_reason: QuoteRequestRejectReason,
    text: Option<Text>,
    encoded_text_len: Option<EncodedTextLen>,
    encoded_text: Option<EncodedText>,
}
struct RFQRequestMessage {
    r_fq_req_id: RFQReqID,
    subscription_request_type: Option<SubscriptionRequestType>,
}
struct QuoteStatusReportMessage {
    quote_status_req_id: Option<QuoteStatusReqID>,
    quote_req_id: Option<QuoteReqID>,
    quote_id: QuoteID,
    quote_type: Option<QuoteType>,
    account: Option<Account>,
    account_type: Option<AccountType>,
    trading_session_id: Option<TradingSessionID>,
    trading_session_sub_id: Option<TradingSessionSubID>,
    bid_px: Option<BidPx>,
    offer_px: Option<OfferPx>,
    mkt_bid_px: Option<MktBidPx>,
    mkt_offer_px: Option<MktOfferPx>,
    min_bid_size: Option<MinBidSize>,
    bid_size: Option<BidSize>,
    min_offer_size: Option<MinOfferSize>,
    offer_size: Option<OfferSize>,
    valid_until_time: Option<ValidUntilTime>,
    bid_spot_rate: Option<BidSpotRate>,
    offer_spot_rate: Option<OfferSpotRate>,
    bid_forward_points: Option<BidForwardPoints>,
    offer_forward_points: Option<OfferForwardPoints>,
    mid_px: Option<MidPx>,
    bid_yield: Option<BidYield>,
    mid_yield: Option<MidYield>,
    offer_yield: Option<OfferYield>,
    transact_time: Option<TransactTime>,
    fut_sett_date: Option<FutSettDate>,
    ord_type: Option<OrdType>,
    fut_sett_date2: Option<FutSettDate2>,
    order_qty2: Option<OrderQty2>,
    bid_forward_points2: Option<BidForwardPoints2>,
    offer_forward_points2: Option<OfferForwardPoints2>,
    currency: Option<Currency>,
    settl_curr_bid_fx_rate: Option<SettlCurrBidFxRate>,
    settl_curr_offer_fx_rate: Option<SettlCurrOfferFxRate>,
    settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
    commission: Option<Commission>,
    comm_type: Option<CommType>,
    cust_order_capacity: Option<CustOrderCapacity>,
    ex_destination: Option<ExDestination>,
    quote_status: Option<QuoteStatus>,
}
