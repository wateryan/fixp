use fix_4_1_0::fields::*;
struct Heartbeat {
    test_req_id: Option<TestReqID>,
}
struct TestRequest {
    test_req_id: TestReqID,
}
struct ResendRequest {
    begin_seq_no: BeginSeqNo,
    end_seq_no: EndSeqNo,
}
struct Reject {
    ref_seq_num: RefSeqNum,
    text: Option<Text>,
}
struct SequenceReset {
    gap_fill_flag: Option<GapFillFlag>,
    new_seq_no: NewSeqNo,
}
struct Logout {
    text: Option<Text>,
}
struct IndicationofInterest {
    i_o_iid: IOIid,
    i_oi_trans_type: IOITransType,
    i_oi_ref_id: Option<IOIRefID>,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    security_type: Option<SecurityType>,
    maturity_month_year: Option<MaturityMonthYear>,
    maturity_day: Option<MaturityDay>,
    put_or_call: Option<PutOrCall>,
    strike_price: Option<StrikePrice>,
    opt_attribute: Option<OptAttribute>,
    security_exchange: Option<SecurityExchange>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    side: Side,
    i_oi_shares: IOIShares,
    price: Option<Price>,
    currency: Option<Currency>,
    valid_until_time: Option<ValidUntilTime>,
    i_oi_qlty_ind: Option<IOIQltyInd>,
    i_oi_oth_svc: Option<IOIOthSvc>,
    i_oi_natural_flag: Option<IOINaturalFlag>,
    text: Option<Text>,
    transact_time: Option<TransactTime>,
    u_rl_link: Option<URLLink>,
}
struct Advertisement {
    adv_id: AdvId,
    adv_trans_type: AdvTransType,
    adv_ref_id: Option<AdvRefID>,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    security_type: Option<SecurityType>,
    maturity_month_year: Option<MaturityMonthYear>,
    maturity_day: Option<MaturityDay>,
    put_or_call: Option<PutOrCall>,
    strike_price: Option<StrikePrice>,
    opt_attribute: Option<OptAttribute>,
    security_exchange: Option<SecurityExchange>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    adv_side: AdvSide,
    shares: Shares,
    price: Option<Price>,
    currency: Option<Currency>,
    trade_date: Option<TradeDate>,
    transact_time: Option<TransactTime>,
    text: Option<Text>,
    u_rl_link: Option<URLLink>,
    last_mkt: Option<LastMkt>,
}
struct ExecutionReport {
    order_id: OrderID,
    secondary_order_id: Option<SecondaryOrderID>,
    cl_ord_id: Option<ClOrdID>,
    orig_cl_ord_id: Option<OrigClOrdID>,
    client_id: Option<ClientID>,
    exec_broker: Option<ExecBroker>,
    list_id: Option<ListID>,
    exec_id: ExecID,
    exec_trans_type: ExecTransType,
    exec_ref_id: Option<ExecRefID>,
    exec_type: ExecType,
    ord_status: OrdStatus,
    ord_rej_reason: Option<OrdRejReason>,
    account: Option<Account>,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    security_type: Option<SecurityType>,
    maturity_month_year: Option<MaturityMonthYear>,
    maturity_day: Option<MaturityDay>,
    put_or_call: Option<PutOrCall>,
    strike_price: Option<StrikePrice>,
    opt_attribute: Option<OptAttribute>,
    security_exchange: Option<SecurityExchange>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    side: Side,
    order_qty: OrderQty,
    ord_type: Option<OrdType>,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    peg_difference: Option<PegDifference>,
    currency: Option<Currency>,
    time_in_force: Option<TimeInForce>,
    expire_time: Option<ExpireTime>,
    exec_inst: Option<ExecInst>,
    rule80_a: Option<Rule80A>,
    last_shares: LastShares,
    last_px: LastPx,
    last_spot_rate: Option<LastSpotRate>,
    last_forward_points: Option<LastForwardPoints>,
    last_mkt: Option<LastMkt>,
    last_capacity: Option<LastCapacity>,
    leaves_qty: LeavesQty,
    cum_qty: CumQty,
    avg_px: AvgPx,
    trade_date: Option<TradeDate>,
    transact_time: Option<TransactTime>,
    report_to_exch: Option<ReportToExch>,
    commission: Option<Commission>,
    comm_type: Option<CommType>,
    settl_curr_amt: Option<SettlCurrAmt>,
    settl_currency: Option<SettlCurrency>,
    settl_curr_fx_rate: Option<SettlCurrFxRate>,
    settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
    text: Option<Text>,
}
struct OrderCancelReject {
    order_id: OrderID,
    secondary_order_id: Option<SecondaryOrderID>,
    cl_ord_id: ClOrdID,
    orig_cl_ord_id: OrigClOrdID,
    ord_status: OrdStatus,
    client_id: Option<ClientID>,
    exec_broker: Option<ExecBroker>,
    list_id: Option<ListID>,
    cxl_rej_reason: Option<CxlRejReason>,
    text: Option<Text>,
}
struct Logon {
    encrypt_method: EncryptMethod,
    heart_bt_int: HeartBtInt,
    raw_data_length: Option<RawDataLength>,
    raw_data: Option<RawData>,
    reset_seq_num_flag: Option<ResetSeqNumFlag>,
}
struct News {
    orig_time: Option<OrigTime>,
    urgency: Option<Urgency>,
    headline: Headline,
    u_rl_link: Option<URLLink>,
    raw_data_length: Option<RawDataLength>,
    raw_data: Option<RawData>,
}
struct Email {
    email_thread_id: EmailThreadID,
    email_type: EmailType,
    orig_time: Option<OrigTime>,
    subject: Subject,
    order_id: Option<OrderID>,
    cl_ord_id: Option<ClOrdID>,
    raw_data_length: Option<RawDataLength>,
    raw_data: Option<RawData>,
}
struct NewOrderSingle {
    cl_ord_id: ClOrdID,
    client_id: Option<ClientID>,
    exec_broker: Option<ExecBroker>,
    account: Option<Account>,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    handl_inst: HandlInst,
    exec_inst: Option<ExecInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    ex_destination: Option<ExDestination>,
    process_code: Option<ProcessCode>,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    security_type: Option<SecurityType>,
    maturity_month_year: Option<MaturityMonthYear>,
    maturity_day: Option<MaturityDay>,
    put_or_call: Option<PutOrCall>,
    strike_price: Option<StrikePrice>,
    opt_attribute: Option<OptAttribute>,
    security_exchange: Option<SecurityExchange>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    prev_close_px: Option<PrevClosePx>,
    side: Side,
    locate_reqd: Option<LocateReqd>,
    order_qty: Option<OrderQty>,
    cash_order_qty: Option<CashOrderQty>,
    ord_type: OrdType,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    currency: Option<Currency>,
    i_o_iid: Option<IOIid>,
    quote_id: Option<QuoteID>,
    time_in_force: Option<TimeInForce>,
    expire_time: Option<ExpireTime>,
    commission: Option<Commission>,
    comm_type: Option<CommType>,
    rule80_a: Option<Rule80A>,
    forex_req: Option<ForexReq>,
    settl_currency: Option<SettlCurrency>,
    text: Option<Text>,
    fut_sett_date2: Option<FutSettDate2>,
    order_qty2: Option<OrderQty2>,
    open_close: Option<OpenClose>,
    covered_or_uncovered: Option<CoveredOrUncovered>,
    customer_or_firm: Option<CustomerOrFirm>,
    max_show: Option<MaxShow>,
    peg_difference: Option<PegDifference>,
}
struct NewOrderList {
    list_id: ListID,
    wave_no: Option<WaveNo>,
    list_seq_no: ListSeqNo,
    list_no_ords: ListNoOrds,
    list_exec_inst: Option<ListExecInst>,
    cl_ord_id: ClOrdID,
    client_id: Option<ClientID>,
    exec_broker: Option<ExecBroker>,
    account: Option<Account>,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    handl_inst: HandlInst,
    exec_inst: Option<ExecInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    ex_destination: Option<ExDestination>,
    process_code: Option<ProcessCode>,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    security_type: Option<SecurityType>,
    maturity_month_year: Option<MaturityMonthYear>,
    maturity_day: Option<MaturityDay>,
    put_or_call: Option<PutOrCall>,
    strike_price: Option<StrikePrice>,
    opt_attribute: Option<OptAttribute>,
    security_exchange: Option<SecurityExchange>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    prev_close_px: Option<PrevClosePx>,
    side: Side,
    locate_reqd: Option<LocateReqd>,
    order_qty: OrderQty,
    ord_type: OrdType,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    peg_difference: Option<PegDifference>,
    currency: Option<Currency>,
    time_in_force: Option<TimeInForce>,
    expire_time: Option<ExpireTime>,
    commission: Option<Commission>,
    comm_type: Option<CommType>,
    rule80_a: Option<Rule80A>,
    forex_req: Option<ForexReq>,
    settl_currency: Option<SettlCurrency>,
    text: Option<Text>,
    fut_sett_date2: Option<FutSettDate2>,
    order_qty2: Option<OrderQty2>,
    open_close: Option<OpenClose>,
    covered_or_uncovered: Option<CoveredOrUncovered>,
    customer_or_firm: Option<CustomerOrFirm>,
    max_show: Option<MaxShow>,
}
struct OrderCancelRequest {
    orig_cl_ord_id: OrigClOrdID,
    order_id: Option<OrderID>,
    cl_ord_id: ClOrdID,
    list_id: Option<ListID>,
    client_id: Option<ClientID>,
    exec_broker: Option<ExecBroker>,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    security_type: Option<SecurityType>,
    maturity_month_year: Option<MaturityMonthYear>,
    maturity_day: Option<MaturityDay>,
    put_or_call: Option<PutOrCall>,
    strike_price: Option<StrikePrice>,
    opt_attribute: Option<OptAttribute>,
    security_exchange: Option<SecurityExchange>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    side: Side,
    order_qty: Option<OrderQty>,
    cash_order_qty: Option<CashOrderQty>,
    text: Option<Text>,
}
struct OrderCancelReplaceRequest {
    order_id: Option<OrderID>,
    client_id: Option<ClientID>,
    exec_broker: Option<ExecBroker>,
    orig_cl_ord_id: OrigClOrdID,
    cl_ord_id: ClOrdID,
    list_id: Option<ListID>,
    account: Option<Account>,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    handl_inst: HandlInst,
    exec_inst: Option<ExecInst>,
    min_qty: Option<MinQty>,
    max_floor: Option<MaxFloor>,
    ex_destination: Option<ExDestination>,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    security_type: Option<SecurityType>,
    maturity_month_year: Option<MaturityMonthYear>,
    maturity_day: Option<MaturityDay>,
    put_or_call: Option<PutOrCall>,
    strike_price: Option<StrikePrice>,
    opt_attribute: Option<OptAttribute>,
    security_exchange: Option<SecurityExchange>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    side: Side,
    order_qty: Option<OrderQty>,
    cash_order_qty: Option<CashOrderQty>,
    ord_type: OrdType,
    price: Option<Price>,
    stop_px: Option<StopPx>,
    peg_difference: Option<PegDifference>,
    currency: Option<Currency>,
    time_in_force: Option<TimeInForce>,
    expire_time: Option<ExpireTime>,
    commission: Option<Commission>,
    comm_type: Option<CommType>,
    rule80_a: Option<Rule80A>,
    forex_req: Option<ForexReq>,
    settl_currency: Option<SettlCurrency>,
    text: Option<Text>,
    fut_sett_date2: Option<FutSettDate2>,
    order_qty2: Option<OrderQty2>,
    open_close: Option<OpenClose>,
    covered_or_uncovered: Option<CoveredOrUncovered>,
    customer_or_firm: Option<CustomerOrFirm>,
    max_show: Option<MaxShow>,
    locate_reqd: Option<LocateReqd>,
}
struct OrderStatusRequest {
    order_id: Option<OrderID>,
    cl_ord_id: ClOrdID,
    client_id: Option<ClientID>,
    exec_broker: Option<ExecBroker>,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    security_type: Option<SecurityType>,
    maturity_month_year: Option<MaturityMonthYear>,
    maturity_day: Option<MaturityDay>,
    put_or_call: Option<PutOrCall>,
    strike_price: Option<StrikePrice>,
    opt_attribute: Option<OptAttribute>,
    security_exchange: Option<SecurityExchange>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    side: Side,
}
struct Allocation {
    alloc_id: AllocID,
    alloc_trans_type: AllocTransType,
    ref_alloc_id: Option<RefAllocID>,
    alloc_link_id: Option<AllocLinkID>,
    alloc_link_type: Option<AllocLinkType>,
    side: Side,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    security_type: Option<SecurityType>,
    maturity_month_year: Option<MaturityMonthYear>,
    maturity_day: Option<MaturityDay>,
    put_or_call: Option<PutOrCall>,
    strike_price: Option<StrikePrice>,
    opt_attribute: Option<OptAttribute>,
    security_exchange: Option<SecurityExchange>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    shares: Shares,
    last_mkt: Option<LastMkt>,
    avg_px: AvgPx,
    currency: Option<Currency>,
    avg_prx_precision: Option<AvgPrxPrecision>,
    trade_date: TradeDate,
    transact_time: Option<TransactTime>,
    settlmnt_typ: Option<SettlmntTyp>,
    fut_sett_date: Option<FutSettDate>,
    net_money: Option<NetMoney>,
    open_close: Option<OpenClose>,
    text: Option<Text>,
    num_days_interest: Option<NumDaysInterest>,
    accrued_interest_rate: Option<AccruedInterestRate>,
}
struct ListCancelRequest {
    list_id: ListID,
    wave_no: Option<WaveNo>,
    text: Option<Text>,
}
struct ListExecute {
    list_id: ListID,
    wave_no: Option<WaveNo>,
    text: Option<Text>,
}
struct ListStatusRequest {
    list_id: ListID,
    wave_no: Option<WaveNo>,
    text: Option<Text>,
}
struct ListStatus {
    list_id: ListID,
    wave_no: Option<WaveNo>,
    no_rpts: NoRpts,
    rpt_seq: RptSeq,
}
struct AllocationACK {
    client_id: Option<ClientID>,
    exec_broker: Option<ExecBroker>,
    alloc_id: AllocID,
    trade_date: TradeDate,
    transact_time: Option<TransactTime>,
    alloc_status: AllocStatus,
    alloc_rej_code: Option<AllocRejCode>,
    text: Option<Text>,
}
struct DontKnowTrade {
    order_id: Option<OrderID>,
    exec_id: Option<ExecID>,
    d_k_reason: DKReason,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    security_type: Option<SecurityType>,
    maturity_month_year: Option<MaturityMonthYear>,
    maturity_day: Option<MaturityDay>,
    put_or_call: Option<PutOrCall>,
    strike_price: Option<StrikePrice>,
    opt_attribute: Option<OptAttribute>,
    security_exchange: Option<SecurityExchange>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    side: Side,
    order_qty: Option<OrderQty>,
    cash_order_qty: Option<CashOrderQty>,
    last_shares: Option<LastShares>,
    last_px: Option<LastPx>,
    text: Option<Text>,
}
struct QuoteRequest {
    quote_req_id: QuoteReqID,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    security_type: Option<SecurityType>,
    maturity_month_year: Option<MaturityMonthYear>,
    maturity_day: Option<MaturityDay>,
    put_or_call: Option<PutOrCall>,
    strike_price: Option<StrikePrice>,
    opt_attribute: Option<OptAttribute>,
    security_exchange: Option<SecurityExchange>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    prev_close_px: Option<PrevClosePx>,
    side: Option<Side>,
    order_qty: Option<OrderQty>,
    fut_sett_date: Option<FutSettDate>,
    ord_type: Option<OrdType>,
    fut_sett_date2: Option<FutSettDate2>,
    order_qty2: Option<OrderQty2>,
}
struct Quote {
    quote_req_id: Option<QuoteReqID>,
    quote_id: QuoteID,
    symbol: Symbol,
    symbol_sfx: Option<SymbolSfx>,
    security_id: Option<SecurityID>,
    i_d_source: Option<IDSource>,
    security_type: Option<SecurityType>,
    maturity_month_year: Option<MaturityMonthYear>,
    maturity_day: Option<MaturityDay>,
    put_or_call: Option<PutOrCall>,
    strike_price: Option<StrikePrice>,
    opt_attribute: Option<OptAttribute>,
    security_exchange: Option<SecurityExchange>,
    issuer: Option<Issuer>,
    security_desc: Option<SecurityDesc>,
    bid_px: Option<BidPx>,
    offer_px: Option<OfferPx>,
    bid_size: Option<BidSize>,
    offer_size: Option<OfferSize>,
    valid_until_time: Option<ValidUntilTime>,
    bid_spot_rate: Option<BidSpotRate>,
    offer_spot_rate: Option<OfferSpotRate>,
    bid_forward_points: Option<BidForwardPoints>,
    offer_forward_points: Option<OfferForwardPoints>,
    transact_time: Option<TransactTime>,
    fut_sett_date: Option<FutSettDate>,
    ord_type: Option<OrdType>,
    fut_sett_date2: Option<FutSettDate2>,
    order_qty2: Option<OrderQty2>,
}
struct SettlementInstructions {
    settl_inst_id: SettlInstID,
    settl_inst_trans_type: SettlInstTransType,
    settl_inst_mode: SettlInstMode,
    settl_inst_source: SettlInstSource,
    alloc_account: AllocAccount,
    settl_location: Option<SettlLocation>,
    trade_date: Option<TradeDate>,
    alloc_id: Option<AllocID>,
    last_mkt: Option<LastMkt>,
    side: Option<Side>,
    security_type: Option<SecurityType>,
    effective_time: Option<EffectiveTime>,
    transact_time: TransactTime,
    client_id: Option<ClientID>,
    exec_broker: Option<ExecBroker>,
    stand_inst_db_type: Option<StandInstDbType>,
    stand_inst_db_name: Option<StandInstDbName>,
    stand_inst_db_id: Option<StandInstDbID>,
    settl_delivery_type: Option<SettlDeliveryType>,
    settl_depository_code: Option<SettlDepositoryCode>,
    settl_brkr_code: Option<SettlBrkrCode>,
    settl_inst_code: Option<SettlInstCode>,
    security_settl_agent_name: Option<SecuritySettlAgentName>,
    security_settl_agent_code: Option<SecuritySettlAgentCode>,
    security_settl_agent_acct_num: Option<SecuritySettlAgentAcctNum>,
    security_settl_agent_acct_name: Option<SecuritySettlAgentAcctName>,
    security_settl_agent_contact_name: Option<SecuritySettlAgentContactName>,
    security_settl_agent_contact_phone: Option<SecuritySettlAgentContactPhone>,
    cash_settl_agent_name: Option<CashSettlAgentName>,
    cash_settl_agent_code: Option<CashSettlAgentCode>,
    cash_settl_agent_acct_num: Option<CashSettlAgentAcctNum>,
    cash_settl_agent_acct_name: Option<CashSettlAgentAcctName>,
    cash_settl_agent_contact_name: Option<CashSettlAgentContactName>,
    cash_settl_agent_contact_phone: Option<CashSettlAgentContactPhone>,
}
